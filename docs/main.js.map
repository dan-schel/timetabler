{
  "version": 3,
  "sources": ["../node_modules/schel-d-utils-browser/dist/finder.js", "../ts/main.ts"],
  "sourcesContent": ["export const finder = {\r\n    /**\r\n     * Get any element from the document. Throws an error if the ID is invalid.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    any: any,\r\n    /**\r\n     * Get a {@link HTMLDivElement} from the document. Throws an error if the ID\r\n     * is invalid or the type is incorrect.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    div: div,\r\n    /**\r\n     * Get a {@link HTMLAnchorElement} from the document. Throws an error if the\r\n     * ID is invalid or the type is incorrect.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    anchor: anchor,\r\n    /**\r\n     * Get a {@link HTMLInputElement} from the document. Throws an error if the\r\n     * ID is invalid or the type is incorrect.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    input: input,\r\n    /**\r\n     * Get a {@link HTMLButtonElement} from the document. Throws an error if the\r\n     * ID is invalid or the type is incorrect.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    button: button,\r\n    /**\r\n     * Get a {@link HTMLSelectElement} from the document. Throws an error if the\r\n     * ID is invalid or the type is incorrect.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    select: select,\r\n    /**\r\n     * Get a {@link HTMLCanvasElement} from the document. Throws an error if the\r\n     * ID is invalid or the type is incorrect.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    canvas: canvas,\r\n};\r\nfunction any(id) {\r\n    const result = document.getElementById(id);\r\n    if (result != null) {\r\n        return result;\r\n    }\r\n    throw new Error(`Element with id \"#${id}\" not found.`);\r\n}\r\nfunction elementOfType(id, typeName, typeChecker) {\r\n    const result = any(id);\r\n    if (typeChecker(result)) {\r\n        return result;\r\n    }\r\n    throw new Error(`Element with id \"#${id}\" is not a \"${typeName}\".`);\r\n}\r\nfunction div(id) {\r\n    return elementOfType(id, \"HTMLDivElement\", x => x instanceof HTMLDivElement);\r\n}\r\nfunction anchor(id) {\r\n    return elementOfType(id, \"HTMLAnchorElement\", x => x instanceof HTMLAnchorElement);\r\n}\r\nfunction input(id) {\r\n    return elementOfType(id, \"HTMLInputElement\", x => x instanceof HTMLInputElement);\r\n}\r\nfunction button(id) {\r\n    return elementOfType(id, \"HTMLButtonElement\", x => x instanceof HTMLButtonElement);\r\n}\r\nfunction select(id) {\r\n    return elementOfType(id, \"HTMLSelectElement\", x => x instanceof HTMLSelectElement);\r\n}\r\nfunction canvas(id) {\r\n    return elementOfType(id, \"HTMLCanvasElement\", x => x instanceof HTMLCanvasElement);\r\n}\r\n", "import { finder } from \"schel-d-utils-browser\";\r\n\r\n// Retrieve the HTML elements from the page.\r\nconst html = {\r\n  controls: finder.any(\"controls\"),\r\n  canvasContainer: finder.div(\"canvas-container\"),\r\n  canvas: finder.canvas(\"canvas\"),\r\n  mobileExpanderButton: finder.button(\"mobile-expander-button\")\r\n};\r\n\r\n// Retrieve colors in CSS custom properties.\r\nconst css = (() => {\r\n  const style = getComputedStyle(html.canvas);\r\n  return {\r\n    colorInk80: style.getPropertyValue(\"--color-ink-80\")\r\n  };\r\n})();\r\n\r\n// Get the canvas context (throw an error if it's null).\r\nconst ctx = (() => {\r\n  const maybe = html.canvas.getContext(\"2d\");\r\n  if (maybe == null) { throw new Error(\"Cannot get canvas context\"); }\r\n  return maybe;\r\n})();\r\n\r\nlet width = 0;\r\nlet height = 0;\r\nlet dpiRatio = 1;\r\n\r\n// Set the canvas size and draw. Also have the canvas resize itself when the\r\n// window size changes.\r\nfitCanvas();\r\nwindow.addEventListener(\"resize\", () => fitCanvas());\r\n\r\n// Toggle the \"collapsed\" class on the controls when the expander button is\r\n// clicked (only appears when the screen is too small to keep it permanently\r\n// open).\r\nhtml.mobileExpanderButton.addEventListener(\"click\", () => {\r\n  html.controls.classList.toggle(\"collapsed\");\r\n});\r\n\r\n/**\r\n * Fit the canvas to it's container. Must be called on page load and everytime\r\n * the page resizes.\r\n */\r\nfunction fitCanvas() {\r\n  // Get the width/height available.\r\n  const containerSize = html.canvasContainer.getBoundingClientRect();\r\n  width = containerSize.width;\r\n  height = containerSize.height;\r\n\r\n  // Get the canvas context. Throw if null (shouldn't be on any SLIGHTLY modern\r\n  // browser).\r\n  const ctx = html.canvas.getContext(\"2d\");\r\n  if (ctx == null) { throw new Error(\"Cannot get canvas context\"); }\r\n  dpiRatio = calculateDpiRatio(ctx);\r\n\r\n  html.canvas.style.width = `${width}px`;\r\n  html.canvas.style.height = `${height}px`;\r\n  html.canvas.width = width * dpiRatio;\r\n  html.canvas.height = height * dpiRatio;\r\n\r\n  // Now the size has changed, redraw everything.\r\n  draw();\r\n}\r\n\r\n/**\r\n * (Re)draw the content on the canvas.\r\n */\r\nfunction draw() {\r\n  // Scale the context based on the DPI ratio to ensure consistent sizing for\r\n  // high-DPI displays. Apply as a matrix so we don't need to do it for every\r\n  // measurement individually.\r\n  ctx.save();\r\n  ctx.scale(dpiRatio, dpiRatio);\r\n\r\n  // Do all drawing!\r\n  ctx.font = \"1rem Atkinson Hyperlegible\";\r\n  ctx.fillStyle = css.colorInk80;\r\n  ctx.fillText(\r\n    \"Word\",\r\n    width - 30,\r\n    height - 30\r\n  );\r\n\r\n  // Restore the canvas to the default transform once drawing is complete. This\r\n  // doesn't seem necessary.\r\n  ctx.restore();\r\n}\r\n\r\n/**\r\n * Uses `devicePixelRatio` and `backingStorePixelRatio` to calculate how to\r\n * scale the canvas appropriately for high DPI displays.\r\n */\r\nfunction calculateDpiRatio(ctx: CanvasRenderingContext2D) {\r\n  const dpr = window.devicePixelRatio ?? 1;\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const bsr = (ctx as any).backingStorePixelRatio ?? 1;\r\n  return dpr / bsr;\r\n};\r\n"],
  "mappings": ";;;AAAO,MAAM,SAAS;AAAA,IAKlB;AAAA,IAMA;AAAA,IAMA;AAAA,IAMA;AAAA,IAMA;AAAA,IAMA;AAAA,IAMA;AAAA,EACJ;AACA,WAAS,IAAI,IAAI;AACb,UAAM,SAAS,SAAS,eAAe,EAAE;AACzC,QAAI,UAAU,MAAM;AAChB,aAAO;AAAA,IACX;AACA,UAAM,IAAI,MAAM,qBAAqB,gBAAgB;AAAA,EACzD;AACA,WAAS,cAAc,IAAI,UAAU,aAAa;AAC9C,UAAM,SAAS,IAAI,EAAE;AACrB,QAAI,YAAY,MAAM,GAAG;AACrB,aAAO;AAAA,IACX;AACA,UAAM,IAAI,MAAM,qBAAqB,iBAAiB,YAAY;AAAA,EACtE;AACA,WAAS,IAAI,IAAI;AACb,WAAO,cAAc,IAAI,kBAAkB,OAAK,aAAa,cAAc;AAAA,EAC/E;AACA,WAAS,OAAO,IAAI;AAChB,WAAO,cAAc,IAAI,qBAAqB,OAAK,aAAa,iBAAiB;AAAA,EACrF;AACA,WAAS,MAAM,IAAI;AACf,WAAO,cAAc,IAAI,oBAAoB,OAAK,aAAa,gBAAgB;AAAA,EACnF;AACA,WAAS,OAAO,IAAI;AAChB,WAAO,cAAc,IAAI,qBAAqB,OAAK,aAAa,iBAAiB;AAAA,EACrF;AACA,WAAS,OAAO,IAAI;AAChB,WAAO,cAAc,IAAI,qBAAqB,OAAK,aAAa,iBAAiB;AAAA,EACrF;AACA,WAAS,OAAO,IAAI;AAChB,WAAO,cAAc,IAAI,qBAAqB,OAAK,aAAa,iBAAiB;AAAA,EACrF;;;ACvEA,MAAM,OAAO;AAAA,IACX,UAAU,OAAO,IAAI,UAAU;AAAA,IAC/B,iBAAiB,OAAO,IAAI,kBAAkB;AAAA,IAC9C,QAAQ,OAAO,OAAO,QAAQ;AAAA,IAC9B,sBAAsB,OAAO,OAAO,wBAAwB;AAAA,EAC9D;AAGA,MAAM,OAAO,MAAM;AACjB,UAAM,QAAQ,iBAAiB,KAAK,MAAM;AAC1C,WAAO;AAAA,MACL,YAAY,MAAM,iBAAiB,gBAAgB;AAAA,IACrD;AAAA,EACF,GAAG;AAGH,MAAM,OAAO,MAAM;AACjB,UAAM,QAAQ,KAAK,OAAO,WAAW,IAAI;AACzC,QAAI,SAAS,MAAM;AAAE,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAAG;AACnE,WAAO;AAAA,EACT,GAAG;AAEH,MAAI,QAAQ;AACZ,MAAI,SAAS;AACb,MAAI,WAAW;AAIf,YAAU;AACV,SAAO,iBAAiB,UAAU,MAAM,UAAU,CAAC;AAKnD,OAAK,qBAAqB,iBAAiB,SAAS,MAAM;AACxD,SAAK,SAAS,UAAU,OAAO,WAAW;AAAA,EAC5C,CAAC;AAMD,WAAS,YAAY;AAEnB,UAAM,gBAAgB,KAAK,gBAAgB,sBAAsB;AACjE,YAAQ,cAAc;AACtB,aAAS,cAAc;AAIvB,UAAMA,OAAM,KAAK,OAAO,WAAW,IAAI;AACvC,QAAIA,QAAO,MAAM;AAAE,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAAG;AACjE,eAAW,kBAAkBA,IAAG;AAEhC,SAAK,OAAO,MAAM,QAAQ,GAAG;AAC7B,SAAK,OAAO,MAAM,SAAS,GAAG;AAC9B,SAAK,OAAO,QAAQ,QAAQ;AAC5B,SAAK,OAAO,SAAS,SAAS;AAG9B,SAAK;AAAA,EACP;AAKA,WAAS,OAAO;AAId,QAAI,KAAK;AACT,QAAI,MAAM,UAAU,QAAQ;AAG5B,QAAI,OAAO;AACX,QAAI,YAAY,IAAI;AACpB,QAAI;AAAA,MACF;AAAA,MACA,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAIA,QAAI,QAAQ;AAAA,EACd;AAMA,WAAS,kBAAkBA,MAA+B;AA9F1D;AA+FE,UAAM,OAAM,YAAO,qBAAP,YAA2B;AAEvC,UAAM,OAAO,KAAAA,KAAY,2BAAZ,YAAsC;AACnD,WAAO,MAAM;AAAA,EACf;",
  "names": ["ctx"]
}
