{
  "version": 3,
  "sources": ["../node_modules/schel-d-utils-browser/dist/download-upload.js", "../node_modules/schel-d-utils-browser/dist/finder.js", "../node_modules/schel-d-utils/dist/esm/arrays.js", "../node_modules/schel-d-utils/dist/esm/clamp.js", "../node_modules/schel-d-utils/dist/esm/integers.js", "../ts/canvas/utils.ts", "../ts/canvas/animation.ts", "../ts/canvas/transition.ts", "../ts/canvas/visual-block.ts", "../ts/canvas/overflow-visual-block.ts", "../ts/canvas/primary-visual-block.ts", "../ts/canvas/suggestion-visual-block.ts", "../ts/canvas/blocks-renderer.ts", "../ts/time/time-error.ts", "../ts/time/day-of-week.ts", "../ts/time/local-time.ts", "../ts/canvas/gridlines-renderer.ts", "../ts/canvas/timetable-renderer.ts", "../ts/canvas/canvas-controller.ts", "../node_modules/uuid/dist/esm-browser/rng.js", "../node_modules/uuid/dist/esm-browser/stringify.js", "../node_modules/uuid/dist/esm-browser/native.js", "../node_modules/uuid/dist/esm-browser/v4.js", "../ts/class-ui-controller.ts", "../ts/controls-controller.ts", "../node_modules/zod/lib/index.mjs", "../ts/timetable/timetable-class-color.ts", "../ts/timetable/timetable-error.ts", "../ts/timetable/timetable-block.ts", "../ts/timetable/timetable-option.ts", "../ts/timetable/timetable-class.ts", "../ts/timetable/timetable.ts", "../ts/timetable/timetable-choices.ts", "../ts/main.ts"],
  "sourcesContent": ["/**\r\n * Triggers a file to be downloaded by creating a fake anchor tag and clicking\r\n * it. Apparently in 2022 this is still the only way to do this!?\r\n * @param content A text that should be in the file.\r\n * @param filename The default name to give the file once downloaded.\r\n */\r\nexport function download(content, filename) {\r\n    const blob = new Blob([content], { type: \"text/plain\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const anchor = document.createElement(\"a\");\r\n    anchor.href = url;\r\n    anchor.download = filename;\r\n    document.body.appendChild(anchor);\r\n    anchor.click();\r\n    document.body.removeChild(anchor);\r\n    URL.revokeObjectURL(url);\r\n}\r\n;\r\n/**\r\n * Triggers an open file dialog to be created, and passes the content of the\r\n * file chosen to the given callback. Apparently in 2022 the only way to do\r\n * this is STILL to create a fake input tag and simulate clicking it!?\r\n * @param extension The file extension including the dot, e.g. \".txt\".\r\n * @param callback The function to call with the file content.\r\n */\r\nexport function openFileDialog(extension, callback) {\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.accept = extension;\r\n    input.click();\r\n    input.addEventListener(\"change\", async () => {\r\n        const files = input.files;\r\n        if (files != null && files[0] != null) {\r\n            callback(await files[0].text());\r\n        }\r\n    });\r\n}\r\n", "export const finder = {\r\n    /**\r\n     * Get any element from the document. Throws an error if the ID is invalid.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    any: any,\r\n    /**\r\n     * Get a {@link HTMLDivElement} from the document. Throws an error if the ID\r\n     * is invalid or the type is incorrect.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    div: div,\r\n    /**\r\n     * Get a {@link HTMLAnchorElement} from the document. Throws an error if the\r\n     * ID is invalid or the type is incorrect.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    anchor: anchor,\r\n    /**\r\n     * Get a {@link HTMLInputElement} from the document. Throws an error if the\r\n     * ID is invalid or the type is incorrect.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    input: input,\r\n    /**\r\n     * Get a {@link HTMLButtonElement} from the document. Throws an error if the\r\n     * ID is invalid or the type is incorrect.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    button: button,\r\n    /**\r\n     * Get a {@link HTMLSelectElement} from the document. Throws an error if the\r\n     * ID is invalid or the type is incorrect.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    select: select,\r\n    /**\r\n     * Get a {@link HTMLCanvasElement} from the document. Throws an error if the\r\n     * ID is invalid or the type is incorrect.\r\n     * @param id The ID of the element (without the \"#\" prefix).\r\n     */\r\n    canvas: canvas,\r\n};\r\nfunction any(id) {\r\n    const result = document.getElementById(id);\r\n    if (result != null) {\r\n        return result;\r\n    }\r\n    throw new Error(`Element with id \"#${id}\" not found.`);\r\n}\r\nfunction elementOfType(id, typeName, typeChecker) {\r\n    const result = any(id);\r\n    if (typeChecker(result)) {\r\n        return result;\r\n    }\r\n    throw new Error(`Element with id \"#${id}\" is not a \"${typeName}\".`);\r\n}\r\nfunction div(id) {\r\n    return elementOfType(id, \"HTMLDivElement\", x => x instanceof HTMLDivElement);\r\n}\r\nfunction anchor(id) {\r\n    return elementOfType(id, \"HTMLAnchorElement\", x => x instanceof HTMLAnchorElement);\r\n}\r\nfunction input(id) {\r\n    return elementOfType(id, \"HTMLInputElement\", x => x instanceof HTMLInputElement);\r\n}\r\nfunction button(id) {\r\n    return elementOfType(id, \"HTMLButtonElement\", x => x instanceof HTMLButtonElement);\r\n}\r\nfunction select(id) {\r\n    return elementOfType(id, \"HTMLSelectElement\", x => x instanceof HTMLSelectElement);\r\n}\r\nfunction canvas(id) {\r\n    return elementOfType(id, \"HTMLCanvasElement\", x => x instanceof HTMLCanvasElement);\r\n}\r\n", "/**\n * Returns an array of numbers from start (inclusive) to end (exclusive), going\n * up by one at a time. Useful for iterating through numbers in a loop or lambda\n * function. E.g. `range(2, 6)` gives `[2, 3, 4, 5]`.\n * @param start The starting number (inclusive).\n * @param end The ending number (exclusive).\n */\nexport function range(start, end) {\n    return [...Array(end - start).keys()].map(x => x + start);\n}\n/**\n * Returns an array that contains {@link something} repeated a certain\n * {@link amount} of times.\n * @param something The value to appear several times in the array.\n * @param amount The number of times to include said value.\n */\nexport function repeat(something, amount) {\n    const array = [];\n    for (let i = 0; i < amount; i++) {\n        array.push(something);\n    }\n    return array;\n}\nexport function unique(array, equalsFunc) {\n    if (equalsFunc == null) {\n        return [...new Set(array)];\n    }\n    const result = [];\n    for (const item of array) {\n        if (result.some(i => equalsFunc(i, item))) {\n            continue;\n        }\n        result.push(item);\n    }\n    return result;\n}\nexport function areUnique(array, equalsFunc) {\n    return array.length == unique(array, equalsFunc).length;\n}\nexport function arraysMatch(a, b, equalsFunc) {\n    // If both arrays are empty, they match!\n    if (a.length == 0 && b.length == 0) {\n        return true;\n    }\n    // If one array is empty (and not the other), they dont match!\n    if (a.length == 0 || b.length == 0) {\n        return false;\n    }\n    // Fallback to equals comparisons if needed.\n    const comparer = equalsFunc == null\n        ? (a, b) => a == b\n        : equalsFunc;\n    // Check that for each value in a, b has at least one equal value, and\n    // vice-versa.\n    return a.every(c => b.some(d => comparer(c, d))) &&\n        b.every(d => a.some(c => comparer(c, d)));\n}\n", "/**\n * Returns {@link x}, unless it is outside the range of {@link a} and {@link b}.\n * If it is, either {@link a} or {@link b} is returned, depending on which is\n * closest to x. {@link a} is not required to be lower than {@link b}.\n * @param x The input value.\n * @param a One of the two range boundaries (doesn't have to be the lower one).\n * @param b The other of the two range boundaries (doesn't have to be the upper\n * one).\n */\nexport function clamp(x, a, b) {\n    const min = Math.min(a, b);\n    const max = Math.max(a, b);\n    return Math.min(Math.max(x, min), max);\n}\n/**\n * Normalizes {@link x} with a range from {@link inA} to {@link inB} into a\n * range of {@link outA} to {@link outB}. If {@link x} exceeds\n * {@link inA}-{@link inB}, the returned value will exceed\n * {@link outA}-{@link outB} by a proportional amount.\n * @param x The number to re-range.\n * @param inA The input range's first boundary.\n * @param inB The input range's second boundary.\n * @param outA The output range's first boundary.\n * @param outB The output range's second boundary.\n */\nexport function map(x, inA, inB, outA, outB) {\n    return ((x - inA) / (inB - inA)) * (outB - outA) + outA;\n}\n/**\n * Normalizes {@link x} with a range from {@link inA} to {@link inB} into a\n * range of {@link outA} to {@link outB}. The returned value is clamped to be\n * within {@link outA}-{@link outB}.\n * @param x The number to re-range.\n * @param inA The input range's first boundary.\n * @param inB The input range's second boundary.\n * @param outA The output range's first boundary.\n * @param outB The output range's second boundary.\n */\nexport function mapClamp(x, inA, inB, outA, outB) {\n    return clamp(map(x, inA, inB, outA, outB), outA, outB);\n}\n", "/**\n * Parses an integer. Throws an error if the string given is not an integer (it\n * contains decimals, text, or illegal symbols).\n * @param value The string with the integer.\n */\nexport function parseIntThrow(value) {\n    if (!/^-?[0-9]+$/g.test(value)) {\n        throw notAnInt(value);\n    }\n    const num = parseInt(value, 10);\n    return num;\n}\n/**\n * Parses an integer. Returns null if the string given is not an integer (it\n * contains decimals, text, or illegal symbols).\n * @param value The string with the integer.\n */\nexport function parseIntNull(value) {\n    if (!/^-?[0-9]+$/g.test(value)) {\n        return null;\n    }\n    const num = parseInt(value, 10);\n    return num;\n}\n/**\n * \"`value`\" is not an integer.\n */\nconst notAnInt = (value) => new Error(`\"${value}\" is not an integer.`);\n/**\n * For positive numbers, does `x % mod` as usual, but extends this pattern to\n * the negatives.\n *\n * For example:\n * - `posMod(-4, 4) = 0`\n * - `posMod(-3, 4) = 1`\n * - `posMod(-2, 4) = 2`\n * - `posMod(-1, 4) = 3`\n * - `posMod(0, 4) = 0`\n * - `posMod(1, 4) = 1`\n * - `posMod(2, 4) = 2`\n * - `posMod(3, 4) = 3`\n * - `posMod(4, 4) = 0`\n *\n * @param x The number to mod.\n * @param mod The mod factor.\n */\nexport function posMod(x, mod) {\n    if (x >= 0) {\n        return x % mod;\n    }\n    else {\n        return (x + Math.floor(x) * -mod) % mod;\n    }\n}\n", "/**\r\n * Draws a line to the canvas.\r\n * @param ctx The canvas context.\r\n * @param x1 The line's starting x-coordinate.\r\n * @param y1 The line's starting y-coordinate.\r\n * @param x2 The line's ending x-coordinate.\r\n * @param y2 The line's ending y-coordinate.\r\n * @param strokeStyle The stroke style (color) of the line.\r\n * @param lineWidth The thinkness of the line.\r\n */\r\nexport function drawLine(ctx: CanvasRenderingContext2D, x1: number, y1: number,\r\n  x2: number, y2: number, strokeStyle: string, lineWidth: number) {\r\n\r\n  ctx.strokeStyle = strokeStyle;\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.beginPath();\r\n  ctx.moveTo(x1, y1);\r\n  ctx.lineTo(x2, y2);\r\n  ctx.stroke();\r\n}\r\n\r\n/**\r\n * Draws a rounded rectangle to the canvas.\r\n * @param ctx The canvas context.\r\n * @param x1 The x-coordinate of the top-left corner.\r\n * @param y1 The y-coordinate of the top-left corner.\r\n * @param x2 The x-coordinate of the bottom-right corner.\r\n * @param y2 The y-coordinate of the bottom-right corner.\r\n * @param radius The radius of each corner.\r\n * @param fillStyle The fill style (color) of the rectangle.\r\n */\r\nexport function drawRoundedRect(ctx: CanvasRenderingContext2D,\r\n  x1: number, y1: number, x2: number, y2: number, radius: number,\r\n  fillStyle: string) {\r\n\r\n  ctx.fillStyle = fillStyle;\r\n  roundedRectPath(ctx, x1, y1, x2, y2, radius);\r\n  ctx.fill();\r\n}\r\n\r\n/**\r\n * Draws an outlined rounded rectangle to the canvas.\r\n * @param ctx The canvas context.\r\n * @param x1 The x-coordinate of the top-left corner.\r\n * @param y1 The y-coordinate of the top-left corner.\r\n * @param x2 The x-coordinate of the bottom-right corner.\r\n * @param y2 The y-coordinate of the bottom-right corner.\r\n * @param radius The radius of each corner.\r\n * @param strokeStyle The stroke style (color) of the rectangle.\r\n */\r\nexport function drawOutlinedRoundedRect(ctx: CanvasRenderingContext2D,\r\n  x1: number, y1: number, x2: number, y2: number, radius: number,\r\n  strokeStyle: string) {\r\n\r\n  ctx.strokeStyle = strokeStyle;\r\n  ctx.lineWidth = 4;\r\n\r\n  roundedRectPath(ctx, x1 + 2, y1 + 2, x2 - 2, y2 - 2, radius);\r\n  ctx.stroke();\r\n}\r\n\r\n/**\r\n * Draws a rounded rectangle to the canvas filled with a gradient.\r\n * @param ctx The canvas context.\r\n * @param x1 The x-coordinate of the top-left corner.\r\n * @param y1 The y-coordinate of the top-left corner.\r\n * @param x2 The x-coordinate of the bottom-right corner.\r\n * @param y2 The y-coordinate of the bottom-right corner.\r\n * @param radius The radius of each corner.\r\n * @param color1 The first color in the gradient.\r\n * @param color2 The second color in the gradient.\r\n */\r\nexport function drawGradientRoundedRect(ctx: CanvasRenderingContext2D,\r\n  x1: number, y1: number, x2: number, y2: number, radius: number,\r\n  color1: string, color2: string) {\r\n\r\n  ctx.fillStyle = rectGradient(ctx, x1, y1, x2, y2, color1, color2, 2);\r\n\r\n  roundedRectPath(ctx, x1, y1, x2, y2, radius);\r\n  ctx.fill();\r\n}\r\n\r\n/**\r\n * Draws a rounded rectangle to the canvas outlined with a gradient and filled\r\n * with color.\r\n * @param ctx The canvas context.\r\n * @param x1 The x-coordinate of the top-left corner.\r\n * @param y1 The y-coordinate of the top-left corner.\r\n * @param x2 The x-coordinate of the bottom-right corner.\r\n * @param y2 The y-coordinate of the bottom-right corner.\r\n * @param radius The radius of each corner.\r\n * @param color1 The first color in the gradient.\r\n * @param color2 The second color in the gradient.\r\n * @param fillStyle The fill style (color) of the rectangle.\r\n */\r\nexport function drawOutlinedGradientRoundedRect(ctx: CanvasRenderingContext2D,\r\n  x1: number, y1: number, x2: number, y2: number, radius: number,\r\n  color1: string, color2: string, fillStyle: string) {\r\n\r\n  ctx.strokeStyle = rectGradient(ctx, x1, y1, x2, y2, color1, color2, 1);\r\n  ctx.lineWidth = 4;\r\n  ctx.fillStyle = fillStyle;\r\n\r\n  roundedRectPath(ctx, x1 + 2, y1 + 2, x2 - 2, y2 - 2, radius);\r\n  ctx.fill();\r\n  ctx.stroke();\r\n}\r\n\r\n/**\r\n * Creates the path for a rounded rectangle.\r\n * @param ctx The canvas context.\r\n * @param x1 The x-coordinate of the top-left corner.\r\n * @param y1 The y-coordinate of the top-left corner.\r\n * @param x2 The x-coordinate of the bottom-right corner.\r\n * @param y2 The y-coordinate of the bottom-right corner.\r\n * @param radius The radius of each corner.\r\n */\r\nfunction roundedRectPath(ctx: CanvasRenderingContext2D, x1: number, y1: number,\r\n  x2: number, y2: number, radius: number) {\r\n\r\n  ctx.beginPath();\r\n  ctx.moveTo(x1 + radius, y1);\r\n  ctx.lineTo(x2 - radius, y1);\r\n  ctx.quadraticCurveTo(x2, y1, x2, y1 + radius);\r\n  ctx.lineTo(x2, y2 - radius);\r\n  ctx.quadraticCurveTo(x2, y2, x2 - radius, y2);\r\n  ctx.lineTo(x1 + radius, y2);\r\n  ctx.quadraticCurveTo(x1, y2, x1, y2 - radius);\r\n  ctx.lineTo(x1, y1 + radius);\r\n  ctx.quadraticCurveTo(x1, y1, x1 + radius, y1);\r\n  ctx.closePath();\r\n}\r\n\r\nfunction rectGradient(ctx: CanvasRenderingContext2D, x1: number, y1: number,\r\n  x2: number, y2: number, color1: string, color2: string, spread: number) {\r\n\r\n  const centerX = (x1 + x2) / 2;\r\n  const centerY = (y1 + y2) / 2;\r\n  const size = Math.max(x2 - x1, y2 - y1);\r\n\r\n  const gradient = ctx.createLinearGradient(\r\n    centerX - size * 0.5 * spread, centerY - size * 0.5 * spread,\r\n    centerX + size * 0.5 * spread, centerY + size * 0.5 * spread\r\n  );\r\n  gradient.addColorStop(0, color1);\r\n  gradient.addColorStop(1, color2);\r\n  return gradient;\r\n}\r\n\r\n/**\r\n * Draws an icon to the canvas.\r\n * @param ctx The canvas context.\r\n * @param icon The icon.\r\n * @param x The x-coordinate of the top-left corner.\r\n * @param y The y-coordinate of the top-left corner.\r\n * @param scale The size to scale the icon (in addition to the viewbox size).\r\n * @param fillStyle The fill style (color) of the icon.\r\n */\r\nexport function drawIcon(ctx: CanvasRenderingContext2D, icon: Path2D, x: number,\r\n  y: number, scale: number, fillStyle: string) {\r\n\r\n  ctx.save();\r\n  ctx.translate(x, y);\r\n  ctx.scale(scale, scale);\r\n  ctx.fillStyle = fillStyle;\r\n  ctx.fill(icon);\r\n  ctx.restore();\r\n}\r\n\r\n/**\r\n * Draws text to the canvas.\r\n * @param ctx The canvas context.\r\n * @param text The text.\r\n * @param x The x-coordinate of the top-left corner.\r\n * @param y The y-coordinate of the top-left corner.\r\n * @param fontSizeRem The font size (measured in rem) of the text.\r\n * @param fontStyle The font style (bold/italic).\r\n * @param fillStyle The fill style (color) of the text.\r\n */\r\nexport function drawText(ctx: CanvasRenderingContext2D, text: string,\r\n  x: number, y: number, fontSizeRem: number, fontStyle: \"bold\" | null,\r\n  fillStyle: string) {\r\n\r\n  ctx.textBaseline = \"top\";\r\n  ctx.textAlign = \"left\";\r\n\r\n  ctx.font = createFontString(fontSizeRem, fontStyle);\r\n  ctx.fillStyle = fillStyle;\r\n  ctx.fillText(text, x, y);\r\n}\r\n\r\n/**\r\n * Returns the width of the given text in pixels.\r\n * @param ctx The canvas context.\r\n * @param text The text.\r\n * @param fontSizeRem The font size (measured in rem) of the text.\r\n * @param fontStyle The font style (bold/italic).\r\n */\r\nexport function measureText(ctx: CanvasRenderingContext2D, text: string,\r\n  fontSizeRem: number, fontStyle: \"bold\" | null): number {\r\n\r\n  ctx.font = createFontString(fontSizeRem, fontStyle);\r\n  return ctx.measureText(text).width;\r\n}\r\n\r\n/**\r\n * Creates a font string for the canvas, e.g. \"bold 1rem Atkinson Hyperlegible\".\r\n * @param fontSizeRem The font size (measured in rem) of the text.\r\n * @param fontStyle The font style (bold/italic).\r\n */\r\nfunction createFontString(fontSizeRem: number,\r\n  fontStyle: \"bold\" | null): string {\r\n\r\n  return [fontStyle, `${fontSizeRem}rem`, \"Atkinson Hyperlegible\"]\r\n    .filter(x => x != null)\r\n    .join(\" \");\r\n}\r\n\r\n/**\r\n * Converts rem to pixels (multiply by 16).\r\n * @param rem Measurement in pixels.\r\n */\r\nexport function rem(rem: number): number {\r\n  return rem * 16;\r\n}\r\n", "import { mapClamp } from \"schel-d-utils\";\r\n\r\n/** An animation running on the canvas. */\r\nexport abstract class Animation {\r\n  /** True if the animation is finished. */\r\n  abstract isDone(): boolean;\r\n\r\n  /**\r\n   * Indicates that time has passed so the animation's value should be updated.\r\n   * @param delta The number of seconds elasped since the last update.\r\n   */\r\n  abstract run(delta: number): void;\r\n}\r\n\r\n/** Animates a value linearly forward between 0 and 1 for a given duration. */\r\nexport class LerpAnimation extends Animation {\r\n  /** The duration (in seconds) the animation runs (not including the delay). */\r\n  readonly duration: number;\r\n\r\n  /** How long to wait before the animation starts. */\r\n  readonly delay: number;\r\n\r\n  /**\r\n   * How long the animation has been running already. Used to calculate the\r\n   * value.\r\n   */\r\n  private _elapsed: number;\r\n\r\n  /**\r\n   * Creates a {@link LerpAnimation}.\r\n   * @param duration The duration (in seconds) the animation runs (not including\r\n   * the delay).\r\n   * @param delay How long to wait before the animation starts.\r\n   */\r\n  constructor(duration: number, delay: number) {\r\n    super();\r\n    this.duration = duration;\r\n    this.delay = delay;\r\n    this._elapsed = 0;\r\n  }\r\n\r\n  /** Returns a animating value (which is always between 0 and 1). */\r\n  value(): number {\r\n    return mapClamp(this._elapsed, this.delay, this.duration + this.delay, 0, 1);\r\n  }\r\n\r\n  // JSDoc inherited.\r\n  isDone(): boolean {\r\n    return this._elapsed >= this.duration + this.delay;\r\n  }\r\n\r\n  // JSDoc inherited.\r\n  run(delta: number): void {\r\n    this._elapsed += delta;\r\n  }\r\n}\r\n", "import { map } from \"schel-d-utils\";\r\nimport { LerpAnimation } from \"./animation\";\r\nimport { CanvasController } from \"./canvas-controller\";\r\n\r\n/**\r\n * A function transforming a value between 0 and 1, to another value. Used for\r\n * smoothing animations.\r\n */\r\nexport type EasingFunction = (val: number) => number;\r\n\r\n/** Handles creating animations for that values periodically change. */\r\nexport class Transition {\r\n  /** A reference to the canvas (for starting/cancelling animations). */\r\n  private readonly _canvas: CanvasController;\r\n\r\n  /** The final value once the animation is complete. */\r\n  target: number;\r\n\r\n  /** The duration of each created animation. */\r\n  readonly duration: number;\r\n\r\n  /** The current or most recent animation. Note: Can be non-null, but done. */\r\n  private _animation: LerpAnimation | null;\r\n\r\n  /** The start value to animate from. */\r\n  private _from: number;\r\n\r\n  /** The easing function to apply to the animation value. */\r\n  private readonly _easing: EasingFunction;\r\n\r\n  /**\r\n   * Creates a {@link Transition}.\r\n   * @param canvas A reference to the canvas (for starting/cancelling\r\n   * animations).\r\n   * @param startValue The initial value.\r\n   * @param duration The duration of each created animation.\r\n   * @param easing The easing function to apply to the animation value. Uses\r\n   * a linear easing function if not provided.\r\n   */\r\n  constructor(canvas: CanvasController, startValue: number, duration: number,\r\n    easing?: EasingFunction) {\r\n\r\n    this._canvas = canvas;\r\n    this.target = startValue;\r\n    this.duration = duration;\r\n    this._animation = null;\r\n    this._from = 0;\r\n    this._easing = easing ?? linear;\r\n  }\r\n\r\n  /**\r\n   * Gradually changes the value to animate towards the given new target value.\r\n   * @param value The new target value.\r\n   * @param ignoreIfSameTarget Whether to ignore this call instead of restarting\r\n   * the animation if the target value given is identical to the current one.\r\n   * True by default (will not restart animation).\r\n   */\r\n  animateTo(value: number, ignoreIfSameTarget?: boolean) {\r\n    if (this.target == value && ignoreIfSameTarget != false) { return; }\r\n\r\n    this._from = this.value();\r\n\r\n    if (this._animation != null && !this._animation.isDone()) {\r\n      this._canvas.cancelAnimation(this._animation);\r\n    }\r\n\r\n    this.target = value;\r\n    this._animation = new LerpAnimation(this.duration, 0);\r\n    this._canvas.startAnimation(this._animation);\r\n  }\r\n\r\n  /**\r\n   * Cancels any running animation and sets the value to the given one\r\n   * immediately (without animating it).\r\n   * @param value The new value.\r\n   */\r\n  jumpTo(value: number) {\r\n    if (this._animation != null && !this._animation.isDone()) {\r\n      this._canvas.cancelAnimation(this._animation);\r\n    }\r\n\r\n    this._animation = null;\r\n    this.target = value;\r\n  }\r\n\r\n  /** Returns the animating/animated value. */\r\n  value(): number {\r\n    if (this._animation == null || this._animation.isDone()) {\r\n      return this.target;\r\n    }\r\n\r\n    const value = this._easing(this._animation.value());\r\n    return map(value, 0, 1, this._from, this.target);\r\n  }\r\n}\r\n\r\n/** Linear (a.k.a. no easing) easing function. */\r\nexport const linear: EasingFunction = (x: number) =>\r\n  x;\r\n\r\n/** Ease-out cubic easing function (https://easings.net/#easeOutCubic). */\r\nexport const cubicOut: EasingFunction = (x: number) =>\r\n  1 - Math.pow(1 - x, 3);\r\n", "import { TimetableBlock } from \"../timetable/timetable-block\";\r\nimport { TimetableClass } from \"../timetable/timetable-class\";\r\nimport { CanvasController } from \"./canvas-controller\";\r\nimport { GridlinesRenderer } from \"./gridlines-renderer\";\r\nimport { cubicOut } from \"./transition\";\r\nimport { rem } from \"./utils\";\r\n\r\n/** The duration of block transition animations. */\r\nexport const blockTransitionDuration = 0.2;\r\n\r\n/** The easing function used for block transition animations. */\r\nexport const blockTransitionEasing = cubicOut;\r\n\r\n/** Handles drawing an allocated section of timetable. */\r\nexport abstract class VisualBlock {\r\n  /** The canvas to draw to. */\r\n  protected readonly _canvas: CanvasController;\r\n\r\n  /** The gridlines renderer to retrieve grid dimensions from. */\r\n  protected readonly _gridlines: GridlinesRenderer;\r\n\r\n  /** The class this block is for. */\r\n  readonly timetableClass: TimetableClass;\r\n\r\n  /** The timetable block being drawn for. */\r\n  timetableBlock: TimetableBlock;\r\n\r\n  /**\r\n   * Creates a {@link VisualBlock}.\r\n   * @param canvas The canvas to draw to.\r\n   * @param gridlines The gridlines renderer to retrieve grid dimensions from.\r\n   * @param timetableClass The class this block is for.\r\n   * @param initialBlock The timetable block being drawn for.\r\n   */\r\n  constructor(canvas: CanvasController, gridlines: GridlinesRenderer,\r\n    timetableClass: TimetableClass, initialBlock: TimetableBlock) {\r\n\r\n    this._canvas = canvas;\r\n    this._gridlines = gridlines;\r\n    this.timetableClass = timetableClass;\r\n    this.timetableBlock = initialBlock;\r\n  }\r\n\r\n  /**\r\n   * Returns the canvas coordinates to draw the rectangle for the block.\r\n   * @param x The column-coordinate the block should be at.\r\n   * @param y1 The row-coordinate of the top of the block.\r\n   * @param y2 The row-coordinate of the bottom of the block.\r\n   */\r\n  dimensions(x: number, y1: number, y2: number) {\r\n    const {\r\n      x1: gridX1, y1: gridY1, dayWidth, hourHeight\r\n    } = this._gridlines.gridDimensions();\r\n\r\n    const blockHeight = Math.max(hourHeight * (y2 - y1), rem(1));\r\n\r\n    return {\r\n      blockX1: gridX1 + dayWidth * x,\r\n      blockY1: gridY1 + hourHeight * y1,\r\n      blockX2: gridX1 + dayWidth * (x + 1),\r\n      blockY2: gridY1 + hourHeight * y1 + blockHeight,\r\n      blockWidth: dayWidth,\r\n      blockHeight: blockHeight\r\n    };\r\n  }\r\n}\r\n", "import { TimetableBlock } from \"../timetable/timetable-block\";\r\nimport { TimetableClass } from \"../timetable/timetable-class\";\r\nimport { CanvasController } from \"./canvas-controller\";\r\nimport { GridlinesRenderer } from \"./gridlines-renderer\";\r\nimport { drawRoundedRect, rem } from \"./utils\";\r\nimport { VisualBlock } from \"./visual-block\";\r\n\r\n/** The overflow visual block (appears on next day) for a timetable block. */\r\nexport class OverflowVisualBlock extends VisualBlock {\r\n  /** The x-coordinate (day of week). */\r\n  readonly x: number;\r\n\r\n  /** The y1-coordinate (start time). */\r\n  readonly y1: number;\r\n\r\n  /** The y2-coordinate (end time). */\r\n  readonly y2: number;\r\n\r\n  /**\r\n   * Creates a {@link OverflowVisualBlock}.\r\n   * @param canvas The canvas to draw to.\r\n   * @param gridlines The gridlines renderer to retrieve grid dimensions from.\r\n   * @param timetableClass The class this block is for.\r\n   * @param block The timetable block being drawn for.\r\n   * @param x The x-coordinate (day of week).\r\n   * @param y1 The y1-coordinate (start time).\r\n   * @param x The y2-coordinate (end time).\r\n   */\r\n  constructor(canvas: CanvasController, gridlines: GridlinesRenderer,\r\n    timetableClass: TimetableClass, block: TimetableBlock, x: number,\r\n    y1: number, y2: number) {\r\n\r\n    super(canvas, gridlines, timetableClass, block);\r\n\r\n    this.x = x;\r\n    this.y1 = y1;\r\n    this.y2 = y2;\r\n  }\r\n\r\n  /**\r\n   * Draws the visual block.\r\n   * @param ctx The canvas context.\r\n   */\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    const { blockX1, blockY1, blockX2, blockY2 } = this.dimensions(\r\n      this.x, this.y1, this.y2\r\n    );\r\n\r\n    drawRoundedRect(\r\n      ctx, blockX1, blockY1, blockX2, blockY2, rem(0.5),\r\n      this._canvas.css.colorInk30\r\n    );\r\n  }\r\n}\r\n", "import { TimetableBlock } from \"../timetable/timetable-block\";\r\nimport { TimetableClass } from \"../timetable/timetable-class\";\r\nimport { CanvasController } from \"./canvas-controller\";\r\nimport { GridlinesRenderer } from \"./gridlines-renderer\";\r\nimport { Transition } from \"./transition\";\r\nimport {\r\n  drawGradientRoundedRect, drawOutlinedGradientRoundedRect, drawText,\r\n  measureText, rem\r\n} from \"./utils\";\r\nimport { blockTransitionDuration, blockTransitionEasing, VisualBlock }\r\n  from \"./visual-block\";\r\n\r\n/** The primary visual block (not the overflow block) for a timetable block. */\r\nexport class PrimaryVisualBlock extends VisualBlock {\r\n  /** The current value of the animating x-coordinate (day of week). */\r\n  private xTransition: Transition;\r\n\r\n  /** The current value of the animating y1-coordinate (start time). */\r\n  private y1Transition: Transition;\r\n\r\n  /** The current value of the animating y2-coordinate (end time). */\r\n  private y2Transition: Transition;\r\n\r\n  /** Override coords used when dragging. Null if not being dragged. */\r\n  private _dragCoords: { x: number, y1: number, y2: number } | null;\r\n\r\n  /** The abbreviated class name to show on the block. */\r\n  private _abbreviatedClassName: string;\r\n\r\n  /**\r\n   * Creates a {@link PrimaryVisualBlock}.\r\n   * @param canvas The canvas to draw to.\r\n   * @param gridlines The gridlines renderer to retrieve grid dimensions from.\r\n   * @param timetableClass The class this block is for.\r\n   * @param initialBlock The timetable block being drawn for.\r\n   * @param initialX The initial x-coordinate (day of week).\r\n   * @param initialY1 The initial y1-coordinate (start time).\r\n   * @param initialY2 The initial y2-coordinate (end time).\r\n   */\r\n  constructor(canvas: CanvasController, gridlines: GridlinesRenderer,\r\n    timetableClass: TimetableClass, initialBlock: TimetableBlock,\r\n    initialX: number, initialY1: number, initialY2: number) {\r\n\r\n    super(canvas, gridlines, timetableClass, initialBlock);\r\n\r\n    this.xTransition = new Transition(\r\n      this._canvas, initialX, blockTransitionDuration, blockTransitionEasing\r\n    );\r\n    this.y1Transition = new Transition(\r\n      this._canvas, initialY1, blockTransitionDuration, blockTransitionEasing\r\n    );\r\n    this.y2Transition = new Transition(\r\n      this._canvas, initialY2, blockTransitionDuration, blockTransitionEasing\r\n    );\r\n    this._dragCoords = null;\r\n\r\n    this._abbreviatedClassName = timetableClass.getAbbreviatedName();\r\n  }\r\n\r\n  /**\r\n   * Animates the visual block moving to a new location. Clears any drag\r\n   * coordinates being used.\r\n   * @param newBlock The new timetable block being drawn for.\r\n   * @param newX The new x-coordinate (day of week).\r\n   * @param newY1 The new y1-coordinate (start time).\r\n   * @param newY2 The new y2-coordinate (end time).\r\n   */\r\n  animateTo(newBlock: TimetableBlock, newX: number, newY1: number, newY2: number) {\r\n    if (this._dragCoords != null) {\r\n      this.xTransition.jumpTo(this._dragCoords.x);\r\n      this.y1Transition.jumpTo(this._dragCoords.y1);\r\n      this.y2Transition.jumpTo(this._dragCoords.y2);\r\n      this._dragCoords = null;\r\n    }\r\n\r\n    this.timetableBlock = newBlock;\r\n    this.xTransition.animateTo(newX);\r\n    this.y1Transition.animateTo(newY1);\r\n    this.y2Transition.animateTo(newY2);\r\n  }\r\n\r\n  /**\r\n   * Assigns drag coordinates using the given canvas coordinates (in pixels).\r\n   * @param canvasX The x coordinate on the canvas (in pixels).\r\n   * @param canvasY The y coordinate on the canvas (in pixels).\r\n   */\r\n  dragTo(canvasX: number, canvasY: number) {\r\n    const {\r\n      x1: gridX1, y1: gridY1, dayWidth, hourHeight\r\n    } = this._gridlines.gridDimensions();\r\n\r\n    const duration = this.y2Transition.target - this.y1Transition.target;\r\n\r\n    // Convert canvas coordinates to table (row/column) coordinates.\r\n    this._dragCoords = {\r\n      x: (canvasX - gridX1) / dayWidth - 0.5,\r\n      y1: (canvasY - gridY1) / hourHeight - duration / 2,\r\n      y2: (canvasY - gridY1) / hourHeight + duration / 2,\r\n    };\r\n\r\n    this._canvas.markDirty();\r\n  }\r\n\r\n  /** Clear the drag coordinates. Animate back to former position. */\r\n  cancelDrag() {\r\n    if (this._dragCoords == null) { return; }\r\n\r\n    const oldX = this.xTransition.target;\r\n    this.xTransition.jumpTo(this._dragCoords.x);\r\n    this.xTransition.animateTo(oldX);\r\n\r\n    const oldY1 = this.y1Transition.target;\r\n    this.y1Transition.jumpTo(this._dragCoords.y1);\r\n    this.y1Transition.animateTo(oldY1);\r\n\r\n    const oldY2 = this.y2Transition.target;\r\n    this.y2Transition.jumpTo(this._dragCoords.y2);\r\n    this.y2Transition.animateTo(oldY2);\r\n\r\n    this._dragCoords = null;\r\n  }\r\n\r\n  /**\r\n   * Draws the visual block.\r\n   * @param ctx The canvas context.\r\n   */\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    // Use drag coordinates if present.\r\n    const x = this._dragCoords?.x ?? this.xTransition.value();\r\n    const y1 = this._dragCoords?.y1 ?? this.y1Transition.value();\r\n    const y2 = this._dragCoords?.y2 ?? this.y2Transition.value();\r\n\r\n    const {\r\n      blockX1, blockY1, blockX2, blockY2, blockWidth, blockHeight\r\n    } = this.dimensions(x, y1, y2);\r\n\r\n    const colors = this._canvas.css.classColors[this.timetableClass.color];\r\n\r\n    if (this.timetableBlock.online) {\r\n      // Draw online classes as outlined rectangles.\r\n      drawOutlinedGradientRoundedRect(\r\n        ctx, blockX1, blockY1, blockX2, blockY2, rem(0.5), colors.gradient1,\r\n        colors.gradient2, this._canvas.css.colorPaper20\r\n      );\r\n    }\r\n    else {\r\n      // Draw in-person classes as filled rectangles.\r\n      drawGradientRoundedRect(\r\n        ctx, blockX1, blockY1, blockX2, blockY2, rem(0.5), colors.gradient1,\r\n        colors.gradient2\r\n      );\r\n    }\r\n\r\n    // Online lines are filled with a similar shade to the background, so choose\r\n    // a text color appropriately.\r\n    const textColor = this.timetableBlock.online\r\n      ? this._canvas.css.colorInk80\r\n      : colors.on;\r\n\r\n    // Work out if there's enough space to show the class type as well as the\r\n    // name.\r\n    const typeTextWidth = measureText(ctx, this.timetableClass.type, 0.75, null);\r\n    const showType = blockHeight >= rem(3) && blockWidth >= typeTextWidth + rem(1);\r\n\r\n    // Draw the name (abbreviated).\r\n    const nameTextWidth = measureText(ctx, this._abbreviatedClassName, 1, \"bold\");\r\n    const nameTextX = blockX1 + (blockWidth - nameTextWidth) / 2;\r\n    const nameTextY = blockY1 + (blockHeight - rem(showType ? 2.0 : 1)) / 2;\r\n    drawText(\r\n      ctx, this._abbreviatedClassName, nameTextX, nameTextY, 1, \"bold\",\r\n      textColor\r\n    );\r\n\r\n    // Draw the class type is we determined there was enough space.\r\n    if (showType) {\r\n      const typeTextX = blockX1 + (blockWidth - typeTextWidth) / 2;\r\n      const typeTextY = blockY1 + (blockHeight - rem(2.25)) / 2 + rem(1.25);\r\n      drawText(\r\n        ctx, this.timetableClass.type, typeTextX, typeTextY, 0.75, null,\r\n        textColor\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given coordinates lie inside this visual block.\r\n   * @param x The x coordinate.\r\n   * @param y The y coordinate.\r\n   */\r\n  isWithin(x: number, y: number) {\r\n    // Ignore animations, use target values.\r\n    const { blockX1, blockY1, blockX2, blockY2 } = this.dimensions(\r\n      this.xTransition.target, this.y1Transition.target,\r\n      this.y2Transition.target\r\n    );\r\n\r\n    return x >= blockX1 && x <= blockX2 && y >= blockY1 && y <= blockY2;\r\n  }\r\n}\r\n", "import { TimetableBlock } from \"../timetable/timetable-block\";\r\nimport { TimetableClass } from \"../timetable/timetable-class\";\r\nimport { TimetableOption } from \"../timetable/timetable-option\";\r\nimport { CanvasController } from \"./canvas-controller\";\r\nimport { GridlinesRenderer } from \"./gridlines-renderer\";\r\nimport { drawRoundedRect, rem, measureText, drawText, drawOutlinedRoundedRect }\r\n  from \"./utils\";\r\nimport { VisualBlock } from \"./visual-block\";\r\n\r\n/**\r\n * The suggestion visual block (appears when dragging) for a timetable block.\r\n */\r\nexport class SuggestionVisualBlock extends VisualBlock {\r\n  /** The option this suggestion is part of. */\r\n  readonly option: TimetableOption;\r\n\r\n  /** The x-coordinate (day of week). */\r\n  readonly x: number;\r\n\r\n  /** The y1-coordinate (start time). */\r\n  readonly y1: number;\r\n\r\n  /** The y2-coordinate (end time). */\r\n  readonly y2: number;\r\n\r\n  /** An optional label to display on the block. */\r\n  readonly label: string | null;\r\n\r\n  /** Whether to show the block as highlighted (when this option is hovered). */\r\n  private _highlighted: boolean;\r\n\r\n  /**\r\n   * Creates a {@link OverflowVisualBlock}.\r\n   * @param canvas The canvas to draw to.\r\n   * @param gridlines The gridlines renderer to retrieve grid dimensions from.\r\n   * @param timetableClass The class this block is for.\r\n   * @param option The option this suggestion is part of.\r\n   * @param block The timetable block being drawn for.\r\n   * @param x The x-coordinate (day of week).\r\n   * @param y1 The y1-coordinate (start time).\r\n   * @param x The y2-coordinate (end time).\r\n   * @param label An optional label to display on the block.\r\n   */\r\n  constructor(canvas: CanvasController, gridlines: GridlinesRenderer,\r\n    timetableClass: TimetableClass, option: TimetableOption,\r\n    block: TimetableBlock, x: number, y1: number, y2: number,\r\n    label: string | null) {\r\n\r\n    super(canvas, gridlines, timetableClass, block);\r\n\r\n    this.option = option;\r\n    this.x = x;\r\n    this.y1 = y1;\r\n    this.y2 = y2;\r\n    this.label = label;\r\n    this._highlighted = false;\r\n  }\r\n\r\n  /**\r\n   * Draws the visual block.\r\n   * @param ctx The canvas context.\r\n   */\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    const {\r\n      blockX1, blockY1, blockX2, blockY2, blockWidth, blockHeight\r\n    } = this.dimensions(this.x, this.y1, this.y2);\r\n\r\n    if (this.timetableBlock.online) {\r\n      // Show online blocks as outlined rectangles.\r\n      drawOutlinedRoundedRect(\r\n        ctx, blockX1, blockY1, blockX2, blockY2, rem(0.5),\r\n        this._highlighted ? this._canvas.css.colorInk30 : this._canvas.css.colorInk10\r\n      );\r\n    }\r\n    else {\r\n      // Show in-person blocks as filled rectangles.\r\n      drawRoundedRect(\r\n        ctx, blockX1, blockY1, blockX2, blockY2, rem(0.5),\r\n        this._highlighted ? this._canvas.css.colorInk30 : this._canvas.css.colorInk10\r\n      );\r\n    }\r\n\r\n    // If present, draw the label (which helps identify where blocks are part of\r\n    // the same option).\r\n    if (this.label != null) {\r\n      const textWidth = measureText(ctx, this.label, 2, \"bold\");\r\n      const textX = blockX1 + (blockWidth - textWidth) / 2;\r\n      const textY = blockY1 + (blockHeight - rem(2)) / 2 + 2;\r\n      drawText(\r\n        ctx, this.label, textX, textY, 2, \"bold\", this._canvas.css.colorInk30\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given coordinates lie inside this visual block.\r\n   * @param x The x coordinate.\r\n   * @param y The y coordinate.\r\n   */\r\n  isWithin(x: number, y: number) {\r\n    // Ignore animations, use target values.\r\n    const { blockX1, blockY1, blockX2, blockY2 } = this.dimensions(\r\n      this.x, this.y1, this.y2\r\n    );\r\n\r\n    return x >= blockX1 && x <= blockX2 && y >= blockY1 && y <= blockY2;\r\n  }\r\n\r\n  /**\r\n   * Changes whether the block is shown as highlighted.\r\n   * @param highlighted\r\n   */\r\n  setHighlighted(highlighted: boolean) {\r\n    this._highlighted = highlighted;\r\n    this._canvas.markDirty();\r\n  }\r\n}\r\n", "import { getCurrentTimetable, updateTimetable } from \"../main\";\r\nimport { TimetableBlock } from \"../timetable/timetable-block\";\r\nimport { TimetableChoices } from \"../timetable/timetable-choices\";\r\nimport { TimetableClass } from \"../timetable/timetable-class\";\r\nimport { CanvasController } from \"./canvas-controller\";\r\nimport { GridlinesRenderer } from \"./gridlines-renderer\";\r\nimport { OverflowVisualBlock } from \"./overflow-visual-block\";\r\nimport { PrimaryVisualBlock } from \"./primary-visual-block\";\r\nimport { SuggestionVisualBlock } from \"./suggestion-visual-block\";\r\n\r\n/** Instructions for which visual blocks need to be created for a block. */\r\nexport type VisualBlockMapping = {\r\n  block: TimetableBlock,\r\n  main: {\r\n    x: number, y1: number, y2: number\r\n  },\r\n  overflow: {\r\n    x: number, y1: number, y2: number\r\n  } | null\r\n};\r\n\r\n/** Handles rendering the timetable blocks to the canvas. */\r\nexport class BlocksRenderer {\r\n  /** The canvas to draw to. */\r\n  private readonly _canvas: CanvasController;\r\n\r\n  /** The gridlines renderer to retrieve grid dimensions from. */\r\n  private readonly _gridlines: GridlinesRenderer;\r\n\r\n  /** The primary visual blocks for each class. */\r\n  private readonly _primaryBlocks: PrimaryVisualBlock[];\r\n\r\n  /** The overflow visual blocks for each class (if appropriate). */\r\n  private readonly _overflowBlocks: OverflowVisualBlock[];\r\n\r\n  /** The block currently being dragged (if any). */\r\n  private _draggingBlock: PrimaryVisualBlock | null;\r\n\r\n  /** The suggestion blocks being displayed while dragging (if any). */\r\n  private _suggestionBlocks: SuggestionVisualBlock[];\r\n\r\n  /**\r\n   * Creates a {@link BlocksRenderer}.\r\n   * @param canvas The canvas to draw to.\r\n   * @param gridlines The gridlines renderer to retrieve grid dimensions from.\r\n   */\r\n  constructor(canvas: CanvasController, gridlines: GridlinesRenderer) {\r\n    this._canvas = canvas;\r\n    this._gridlines = gridlines;\r\n    this._primaryBlocks = [];\r\n    this._overflowBlocks = [];\r\n    this._draggingBlock = null;\r\n    this._suggestionBlocks = [];\r\n  }\r\n\r\n  /**\r\n   * Called whenever the timetable/choices changes.\r\n   * @param timetable The updated timetable.\r\n   */\r\n  onTimetableUpdate(timetable: TimetableChoices) {\r\n    this._overflowBlocks.splice(0, this._overflowBlocks.length);\r\n\r\n    // For each choice (a.k.a. each timetable class, since there's guaranteed to\r\n    // be exactly one for each)...\r\n    timetable.choices.forEach(c => {\r\n      // Todo: skip doing everything below if the choice hasn't changed.\r\n\r\n      // Get the class and an array of blocks required.\r\n      const timetableClass = c.timetableClass;\r\n      const timetableBlocks = c.option == null ? [] : c.option.blocks;\r\n\r\n      // For each block, work out which visual blocks need to be created.\r\n      const newCoordinates: VisualBlockMapping[] =\r\n        timetableBlocks.map(b => this._determineVisualBlockMapping(b));\r\n\r\n      // Animate/create/destroy the primary blocks for these new coordinates.\r\n      this._animatePrimaryBlocks(timetableClass, newCoordinates);\r\n\r\n      // Create overflow blocks from coordinates. Todo: animate in/out.\r\n      newCoordinates.forEach(b => {\r\n        if (b.overflow != null) {\r\n          this._overflowBlocks.push(new OverflowVisualBlock(\r\n            this._canvas, this._gridlines, timetableClass, b.block,\r\n            b.overflow.x, b.overflow.y1, b.overflow.y2\r\n          ));\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Animates the existing blocks for a particular class to new coordinates.\r\n   * Creates and destroys blocks if needed so the right amount are shown.\r\n   * @param timetableClass The class to create blocks for.\r\n   * @param newCoordinates The new coordinates to animate the blocks to.\r\n   */\r\n  private _animatePrimaryBlocks(timetableClass: TimetableClass,\r\n    newCoordinates: VisualBlockMapping[]) {\r\n\r\n    // Find the blocks already being shown for this class.\r\n    const existingBlocks = this._primaryBlocks\r\n      .filter(b => b.timetableClass.equals(timetableClass));\r\n\r\n    // For each existing block...\r\n    existingBlocks.forEach((b, i) => {\r\n      if (newCoordinates.length > i) {\r\n        // If there are enough new coordinates that this block can be\r\n        // repurposed, then animate it to a new location.\r\n        const coordinates = newCoordinates[i];\r\n        b.animateTo(\r\n          coordinates.block, coordinates.main.x, coordinates.main.y1,\r\n          coordinates.main.y2\r\n        );\r\n      }\r\n      else {\r\n        // If by the time this block is reached in the loop all the new\r\n        // coordinates have blocks assigned, then this block is extra, so delete\r\n        // it. Todo: animate it out!\r\n        this._primaryBlocks.splice(this._primaryBlocks.indexOf(b), 1);\r\n      }\r\n    });\r\n\r\n    // If there are more new coordinates than existing blocks, then we'll need\r\n    // to create some new blocks.\r\n    if (newCoordinates.length > existingBlocks.length) {\r\n      newCoordinates.slice(existingBlocks.length).forEach(b => {\r\n        // Todo: animate in the new block.\r\n        this._primaryBlocks.push(new PrimaryVisualBlock(\r\n          this._canvas, this._gridlines, timetableClass, b.block,\r\n          b.main.x, b.main.y1, b.main.y2\r\n        ));\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines where visual blocks should be shown on the canvas for a given\r\n   * timetable block.\r\n   * @param b The timetable block.\r\n   */\r\n  private _determineVisualBlockMapping(b: TimetableBlock): VisualBlockMapping {\r\n    const start = this._gridlines.timeLocation(b.dayOfWeek, b.startTime);\r\n    const end = this._gridlines.timeLocation(b.dayOfWeek, b.endTime);\r\n\r\n    // Should never happen.\r\n    if (start == null || end == null) { throw new Error(); }\r\n\r\n    // If the start and end columns are different, then an overflow block\r\n    // will be required. Work out where the end of the first block should\r\n    // go.\r\n    const firstBlockEnd = start.x == end.x\r\n      ? end.y\r\n      : this._gridlines.endHour - this._gridlines.startHour;\r\n\r\n    // Work out where the overflow block should go (if appropriate).\r\n    let overflow = null;\r\n    if (start.x != end.x) {\r\n      overflow = { x: end.x, y1: 0, y2: end.y };\r\n    }\r\n\r\n    return {\r\n      block: b,\r\n      main: { x: start.x, y1: start.y, y2: firstBlockEnd },\r\n      overflow: overflow\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Draws the timetable to the canvas.\r\n   * @param ctx The canvas context.\r\n   */\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    this._primaryBlocks.forEach(b => {\r\n      // We'll render the dragging block later (so it's on top).\r\n      if (b != this._draggingBlock) {\r\n        b.draw(ctx);\r\n      }\r\n    });\r\n    this._overflowBlocks.forEach(b => b.draw(ctx));\r\n\r\n    this._suggestionBlocks.forEach(b => b.draw(ctx));\r\n    this._draggingBlock?.draw(ctx);\r\n  }\r\n\r\n  /**\r\n   * Called when the mouse/touch is pressed on the canvas.\r\n   * @param e The event details.\r\n   */\r\n  onPointerDown(e: MouseEvent) {\r\n    // Multi-touch devices allow a pointerdown to occur without a pointerup\r\n    // beforehand, so ditch the old block if that occurs.\r\n    if (this._draggingBlock != null) {\r\n      this._draggingBlock.cancelDrag();\r\n    }\r\n\r\n    // Find the first block that the pointer is within (if any).\r\n    const x = e.offsetX;\r\n    const y = e.offsetY;\r\n    this._draggingBlock = this._primaryBlocks.find(b => b.isWithin(x, y)) ?? null;\r\n\r\n    if (this._draggingBlock != null) {\r\n      // Move the block to be in the center of the pointer.\r\n      this._draggingBlock.dragTo(x, y);\r\n\r\n      // Build the suggestion blocks for this class.\r\n      this._suggestionBlocks = [];\r\n      const timetableClass = this._draggingBlock.timetableClass;\r\n\r\n      // Only show labels on the suggestion blocks if there are options with\r\n      // multiple blocks.\r\n      const showLabels = timetableClass.options.some(o => o.blocks.length > 1);\r\n\r\n      timetableClass.options.forEach((o, i) => {\r\n        this._suggestionBlocks.push(...o.blocks.map(b => {\r\n          // Create a suggestion block in the place of where the primary visual\r\n          // block would be (don't create one for the overflow).\r\n          const mapping = this._determineVisualBlockMapping(b);\r\n          const label = showLabels ? (i + 1).toFixed() : null;\r\n          return new SuggestionVisualBlock(\r\n            this._canvas, this._gridlines, timetableClass, o, b, mapping.main.x,\r\n            mapping.main.y1, mapping.main.y2, label\r\n          );\r\n        }));\r\n      });\r\n    }\r\n    else {\r\n      this._suggestionBlocks = [];\r\n    }\r\n\r\n    // Suggestion blocks may have changed.\r\n    this._canvas.markDirty();\r\n  }\r\n\r\n  /**\r\n   * Called when the mouse/touch is released on the canvas.\r\n   * @param e The event details.\r\n   */\r\n  onPointerUp(e: MouseEvent) {\r\n    if (this._draggingBlock != null) {\r\n      // Work out if the drag ends on top of a suggestion block.\r\n      const x = e.offsetX;\r\n      const y = e.offsetY;\r\n      const newPosition = this._suggestionBlocks.find(b => b.isWithin(x, y));\r\n\r\n      if (newPosition != null) {\r\n        // If so, make this option the suggestion represent the new choice for\r\n        // this class.\r\n        updateTimetable(getCurrentTimetable().withChoice(\r\n          this._draggingBlock.timetableClass, newPosition.option\r\n        ));\r\n      }\r\n      else {\r\n        // Otherwise return the dragged block back to it's former position.\r\n        this._draggingBlock.cancelDrag();\r\n      }\r\n    }\r\n\r\n    this._draggingBlock = null;\r\n    this._suggestionBlocks = [];\r\n  }\r\n\r\n  /**\r\n   * Called when the mouse/touch moves on the canvas.\r\n   * @param e The event details.\r\n   */\r\n  onPointerMove(e: MouseEvent) {\r\n    if (this._draggingBlock != null) {\r\n      // Move the block we're dragging to the new pointer location.\r\n      const x = e.offsetX;\r\n      const y = e.offsetY;\r\n      this._draggingBlock.dragTo(x, y);\r\n\r\n      // Highlight the suggestion block that we're hovering over (if any), and\r\n      // any others that represent the same option (would have the same label).\r\n      const hovered = this._suggestionBlocks.find(b => b.isWithin(x, y))?.option;\r\n      this._suggestionBlocks.forEach(\r\n        b => b.setHighlighted(hovered != null && b.option.equals(hovered))\r\n      );\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * The error object used when an invalid LocalTime or DayOfWeek operation\r\n * occurs.\r\n */\r\nexport class TimeError extends Error {\r\n  /**\r\n   * Creates a {@link TimeError}.\r\n   * @param message The error message.\r\n   */\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = \"TimeError\";\r\n  }\r\n\r\n  /**\r\n   * Minute of day \"`minuteOfDay`\" is out of range for a LocalTime.\r\n   */\r\n  static timeOutOfRange(minuteOfDay: number): TimeError {\r\n    return new TimeError(\r\n      `Minute of day \"${minuteOfDay}\" is out of range for a LocalTime.`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * String \"`value`\" cannot be interpreted as a LocalTime.\r\n   */\r\n  static badTimeString(value: string): TimeError {\r\n    return new TimeError(\r\n      `String \"${value}\" cannot be interpreted as a LocalTime.`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * \"`value`\" is not a valid days since Monday number for a day of\r\n   * week.\r\n   */\r\n  static invalidDaysSinceMonday(value: number): TimeError {\r\n    return new TimeError(\r\n      `\"${value}\" is not a valid days since Monday number for a day of week.`\r\n    );\r\n  }\r\n}\r\n", "import { posMod } from \"schel-d-utils\";\r\nimport { TimeError } from \"./time-error\";\r\n\r\nconst DayOfWeekNumbers = [0, 1, 2, 3, 4, 5, 6] as const;\r\n\r\ntype DayOfWeekNumber = typeof DayOfWeekNumbers[number];\r\n\r\n/**\r\n * Represents a day of the week value, e.g. Thursday.\r\n */\r\nexport class DayOfWeek {\r\n  /**\r\n   * The number of days this day of the week is away from Monday, e.g. 3 for\r\n   * Thursday. This value will be an integer between 0-6 inclusive.\r\n   */\r\n  readonly daysSinceMonday: DayOfWeekNumber;\r\n\r\n  /** Monday. */\r\n  static readonly mon = new DayOfWeek(0);\r\n\r\n  /** Tuesday. */\r\n  static readonly tue = new DayOfWeek(1);\r\n\r\n  /** Wednesday. */\r\n  static readonly wed = new DayOfWeek(2);\r\n\r\n  /** Thursday. */\r\n  static readonly thu = new DayOfWeek(3);\r\n\r\n  /** Friday. */\r\n  static readonly fri = new DayOfWeek(4);\r\n\r\n  /** Saturday. */\r\n  static readonly sat = new DayOfWeek(5);\r\n\r\n  /** Sunday. */\r\n  static readonly sun = new DayOfWeek(6);\r\n\r\n  /**\r\n   * Creates a {@link DayOfWeek}.\r\n   * @param daysSinceMonday The number of days this day of the week is away from\r\n   * Monday, e.g. 3 for Thursday.\r\n   */\r\n  constructor(daysSinceMonday: DayOfWeekNumber) {\r\n    this.daysSinceMonday = daysSinceMonday;\r\n  }\r\n\r\n  /**\r\n   * Returns the name of the day of the week, e.g. \"Thursday\" for Thursday.\r\n   */\r\n  get name(): string {\r\n    return names[this.daysSinceMonday].full;\r\n  }\r\n\r\n  /**\r\n   * Returns the code name of the day of the week, e.g. \"thu\" for Thursday.\r\n   */\r\n  get codeName(): string {\r\n    return names[this.daysSinceMonday].codeName;\r\n  }\r\n\r\n  /**\r\n   * Returns true if this day of week is either Saturday or Sunday.\r\n   */\r\n  get isWeekend(): boolean {\r\n    return this.daysSinceMonday == 5 || this.daysSinceMonday == 6;\r\n  }\r\n\r\n  /**\r\n   * Returns true if this day of week is not Saturday or Sunday.\r\n   */\r\n  get isWeekday(): boolean {\r\n    return !this.isWeekend;\r\n  }\r\n\r\n  /**\r\n   * Returns the day of week of the day before this one.\r\n   */\r\n  yesterday(): DayOfWeek {\r\n    return DayOfWeek.fromDaysSinceMonday(posMod(this.daysSinceMonday - 1, 7));\r\n  }\r\n\r\n  /**\r\n   * Returns the day of week of the day after this one.\r\n   */\r\n  tomorrow(): DayOfWeek {\r\n    return DayOfWeek.fromDaysSinceMonday(posMod(this.daysSinceMonday + 1, 7));\r\n  }\r\n\r\n  /**\r\n   * Returns true if this and {@link other} refer to the same day of week.\r\n   * @param other The other.\r\n   */\r\n  equals(other: DayOfWeek): boolean {\r\n    return this.daysSinceMonday == other.daysSinceMonday;\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link DayOfWeek} from an arbitrary number.\r\n   * @param daysSinceMonday The number of days this day of the week is away from\r\n   * Monday, e.g. 3 for Thursday. This value must be an integer between 0-6\r\n   * inclusive, otherwise a {@link TimeError} is thrown.\r\n   */\r\n  static fromDaysSinceMonday(daysSinceMonday: number): DayOfWeek {\r\n    if (!Number.isInteger(daysSinceMonday) || daysSinceMonday < 0\r\n      || daysSinceMonday >= 7) {\r\n      throw TimeError.invalidDaysSinceMonday(daysSinceMonday);\r\n    }\r\n\r\n    return new DayOfWeek(daysSinceMonday as DayOfWeekNumber);\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link DayOfWeek} from a (case-insensitive) codename, e.g. \"sat\"\r\n   * or \"Fri\".\r\n   * @param codename The codename (case-insensitive), e.g. \"sat\" or \"Fri\".\r\n   */\r\n  static tryFromCodeName(codename: string): DayOfWeek | null {\r\n    const num = DayOfWeekNumbers.find(n => names[n].codeName === codename.toLowerCase());\r\n    if (num == null) { return null; }\r\n    return new DayOfWeek(num);\r\n  }\r\n}\r\n\r\n/** The names and codenames for each possible {@link DayOfWeekNumber}. */\r\nconst names = {\r\n  0: { full: \"Monday\", codeName: \"mon\" },\r\n  1: { full: \"Tuesday\", codeName: \"tue\" },\r\n  2: { full: \"Wednesday\", codeName: \"wed\" },\r\n  3: { full: \"Thursday\", codeName: \"thu\" },\r\n  4: { full: \"Friday\", codeName: \"fri\" },\r\n  5: { full: \"Saturday\", codeName: \"sat\" },\r\n  6: { full: \"Sunday\", codeName: \"sun\" }\r\n};\r\n", "import { TimeError } from \"./time-error\";\r\n\r\n/**\r\n * Represents a time of day as used by a timetable. Local times can also\r\n * represent times which occur on the next day for timetable purposes (i.e.\r\n * `minuteOfDay` can be greater than `60 * 24`), but only the next day. These\r\n * times are independent of a time zone.\r\n */\r\nexport class LocalTime {\r\n  /**\r\n   * The minute of the day, e.g. 74 for 1:14am. Can exceed `60 * 24` to\r\n   * represent times during the following day (for timetable purposes), but\r\n   * no more than one day.\r\n   */\r\n  readonly minuteOfDay: number;\r\n\r\n  /**\r\n   * Creates a {@link LocalTime} given a minute of day value.\r\n   * @param minuteOfDay The minute of the day, e.g. 74 for 1:14am. Can exceed\r\n   * `60 * 24` to represent times during the following day (for timetable\r\n   * purposes), but no more than one day, otherwise an error is thrown.\r\n   */\r\n  constructor(minuteOfDay: number) {\r\n    if (!Number.isInteger(minuteOfDay)\r\n      || minuteOfDay < 0\r\n      || minuteOfDay >= 60 * 24 * 2) {\r\n      throw TimeError.timeOutOfRange(minuteOfDay);\r\n    }\r\n    this.minuteOfDay = minuteOfDay;\r\n  }\r\n\r\n  /**\r\n   * Returns an integer between 0-23 inclusive representing the hour, e.g. 5 for\r\n   * 5:15am, 22 for 10:29pm.\r\n   */\r\n  get hour(): number {\r\n    return this.hour48 % 24;\r\n  }\r\n\r\n  /**\r\n   * Returns an integer between 0-59 inclusive representing the minute, e.g. 15\r\n   * for 5:15am, 29 for 10:29pm.\r\n   */\r\n  get minute(): number {\r\n    return this.minuteOfDay % 60;\r\n  }\r\n\r\n  /**\r\n   * Returns true if this local time is a time on the \"next day\".\r\n   * @returns\r\n   */\r\n  get isNextDay(): boolean {\r\n    return this.minuteOfDay >= 24 * 60;\r\n  }\r\n\r\n  /**\r\n   * Returns an integer between 0-47 inclusive representing the hour which\r\n   * exceeds 24 for next day times.\r\n   */\r\n  get hour48(): number {\r\n    return Math.floor(this.fractionalHour48);\r\n  }\r\n\r\n  /**\r\n   * Returns a (potentially decimal) number between 0-48 representing the number\r\n   * of hours (and fractional minutes) since midnight. Exceeds 24 hours for next\r\n   * day times.\r\n   */\r\n  get fractionalHour48(): number {\r\n    return this.minuteOfDay / 60;\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link LocalTime} constructed from a given hour, minute, and\r\n   * optionally assigning next day.\r\n   * @param hour The hour of the day (0 to 23 inclusive).\r\n   * @param minute The minute of the day (0 to 59 inclusive).\r\n   * @param nextDay True if this time occurs on the next day (used for timetable\r\n   * purposes). False if omitted.\r\n   */\r\n  static fromTime(hour: number, minute: number, nextDay = false): LocalTime {\r\n    return new LocalTime((nextDay ? (hour + 24) : hour) * 60 + minute);\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link LocalTime} constructed from a given hour and minute.\r\n   * @param hour The hour of the day (0 to 47 inclusive). Can exceed 24 for next\r\n   * day.\r\n   * @param minute The minute of the day (0 to 59 inclusive).\r\n   */\r\n  static fromHour48(hour48: number, minute: number): LocalTime {\r\n    return new LocalTime(hour48 * 60 + minute);\r\n  }\r\n\r\n  /**\r\n   * Parses a {@link LocalTime} from a string, e.g. \"2:04\" or \"15:28\". The\r\n   * string must be in 24-hour format (leading zero not mandatory). To indicate\r\n   * that the time occurs on the next day, use the next day flag, not a \">\"\r\n   * character. Returns null on failure.\r\n   * @param value The string, e.g. \"2:04\" or \"15:28\".\r\n   * @param nextDay Whether this time occurs on the next day.\r\n   */\r\n  static tryParse(value: string, nextDay = false): LocalTime | null {\r\n    // Checks for 1 or 2 digits, a colon, then 2 digits.\r\n    const correctFormat = /^[0-9]{1,2}:[0-9]{2}$/g.test(value);\r\n    if (!correctFormat) { return null; }\r\n\r\n    const components = value.split(\":\");\r\n\r\n    // Confident this won't ever be NaN or negative because of above regex\r\n    // check.\r\n    const hour = parseInt(components[0]);\r\n    const minute = parseInt(components[1]);\r\n    if (hour >= 24 || minute >= 60) { return null; }\r\n\r\n    return LocalTime.fromTime(hour, minute, nextDay);\r\n  }\r\n\r\n  /**\r\n   * Parses a {@link LocalTime} from a string, e.g. \"2:04\" or \"15:28\". The\r\n   * string must be in 24-hour format (leading zero not mandatory). To indicate\r\n   * that the time occurs on the next day, use the next day flag, not a \">\"\r\n   * character. Throws a {@link TimeError} on failure.\r\n   * @param value The string, e.g. \"2:04\" or \"15:28\".\r\n   * @param nextDay Whether this time occurs on the next day.\r\n   */\r\n  static parse(value: string, nextDay = false): LocalTime {\r\n    const val = LocalTime.tryParse(value, nextDay);\r\n    if (val == null) { throw TimeError.badTimeString(value); }\r\n    return val;\r\n  }\r\n\r\n  /**\r\n   * Parses a {@link LocalTime} from a string, e.g. \">2:04\" or \"15:28\". The\r\n   * string must be in 24-hour format (leading zero not mandatory). To indicate\r\n   * that the time occurs on the next day, use a \">\" character. Throws a\r\n   * {@link TimeError} on failure.\r\n   * @param value The string, e.g. \">2:04\" or \"15:28\".\r\n   */\r\n  static parseWithMarker(value: string): LocalTime {\r\n    return this.parse(value.replace(\">\", \"\"), value.charAt(0) == \">\");\r\n  }\r\n\r\n  /**\r\n   * Returns the local time as a 24-hour formatted string, e.g. \"04:02\".\r\n   * @param includeNextDayMarker Whether to prefix times that occur on the next\r\n   * day with \">\" symbols, e.g. \">04:02\" meaning 4:02am the next day.\r\n   */\r\n  toString(includeNextDayMarker: boolean): string {\r\n    return (this.isNextDay && includeNextDayMarker ? \">\" : \"\") +\r\n      `${this.hour.toFixed().padStart(2, \"0\")}:` +\r\n      `${this.minute.toFixed().padStart(2, \"0\")}`;\r\n  }\r\n\r\n  /**\r\n   * Returns the local time as a 12-hour formatted string, e.g. \"4:02am\". The\r\n   * next day flag will be ignored.\r\n   */\r\n  to12HString(): string {\r\n    const hour12 = hour24To12(this.hour);\r\n\r\n    return `${hour12.hour.toFixed()}:` +\r\n      `${this.minute.toFixed().padStart(2, \"0\")}${hour12.half}`;\r\n  }\r\n\r\n  /**\r\n   * Returns true if this time occurs earlier than the {@link other}.\r\n   * @param other The time that if later, results in the method returning true.\r\n   */\r\n  isBefore(other: LocalTime) {\r\n    return this.minuteOfDay < other.minuteOfDay;\r\n  }\r\n\r\n  /**\r\n   * Returns true if this time occurs earlier than the {@link other} or the\r\n   * same.\r\n   * @param other The time that if later or the same, results in the method\r\n   * returning true.\r\n   */\r\n  isBeforeOrEqual(other: LocalTime) {\r\n    return this.minuteOfDay <= other.minuteOfDay;\r\n  }\r\n\r\n  /**\r\n   * Returns true if this time occurs later than the {@link other}.\r\n   * @param other The time that if earlier, results in the method returning true.\r\n   */\r\n  isAfter(other: LocalTime) {\r\n    return !this.isBeforeOrEqual(other);\r\n  }\r\n\r\n  /**\r\n   * Returns true if this time occurs later than the {@link other} or the same.\r\n   * @param other The time that if earlier or the same, results in the method\r\n   * returning true.\r\n   */\r\n  isAfterOrEqual(other: LocalTime) {\r\n    return !this.isBefore(other);\r\n  }\r\n\r\n  /**\r\n   * Returns true if this and {@link other} refer to the same time of day.\r\n   * @param other The other.\r\n   */\r\n  equals(other: LocalTime): boolean {\r\n    return this.minuteOfDay == other.minuteOfDay;\r\n  }\r\n\r\n  /**\r\n   * Return the same local time, but the non-\"next day\" version. Throws a\r\n   * {@link TimeError} if this local time is not the \"next day\" version.\r\n   */\r\n  yesterday(): LocalTime {\r\n    return new LocalTime(this.minuteOfDay - 24 * 60);\r\n  }\r\n\r\n  /**\r\n   * Return the same local time, but the \"next day\" version. Throws a\r\n   * {@link TimeError} if this local time is already the \"next day\" version.\r\n   */\r\n  tomorrow(): LocalTime {\r\n    return new LocalTime(this.minuteOfDay + 24 * 60);\r\n  }\r\n\r\n  /**\r\n   * Returns this time rounded down to the nearest hour (does nothing if the\r\n   * minute component is already 0).\r\n   */\r\n  startOfHour(): LocalTime {\r\n    return LocalTime.fromHour48(this.hour48, 0);\r\n  }\r\n\r\n  /**\r\n   * Returns this time rounded up to the nearest hour (does nothing if the\r\n   * minute component is already 0).\r\n   */\r\n  endOfHour(): LocalTime {\r\n    if (this.minute == 0) { return this; }\r\n    return LocalTime.fromHour48(this.hour48 + 1, 0);\r\n  }\r\n\r\n  /**\r\n   * Returns the local time that is set to 12:00am the next day.\r\n   */\r\n  static startOfTomorrow(): LocalTime {\r\n    return new LocalTime(24 * 60);\r\n  }\r\n\r\n  /**\r\n   * Returns whichever time is the earliest in the group.\r\n   * @param times The group of times.\r\n   */\r\n  static earliest(...times: LocalTime[]): LocalTime {\r\n    return new LocalTime(Math.min(...times.map(t => t.minuteOfDay)));\r\n  }\r\n\r\n  /**\r\n   * Returns whichever time is the latest in the group.\r\n   * @param times The group of times.\r\n   */\r\n  static latest(...times: LocalTime[]): LocalTime {\r\n    return new LocalTime(Math.max(...times.map(t => t.minuteOfDay)));\r\n  }\r\n}\r\n\r\n/** A 12-hour hour. */\r\nexport type Hour12 = {\r\n  hour: number,\r\n  half: \"am\" | \"pm\"\r\n};\r\n\r\n/**\r\n * Converts a 24-hour hour to a 12-hour hour.\r\n * @param hour24 The 24-hour hour.\r\n */\r\nexport function hour24To12(hour24: number): Hour12 {\r\n  return {\r\n    hour: (hour24 + 11) % 12 + 1,\r\n    half: hour24 < 12 ? \"am\" : \"pm\"\r\n  };\r\n}\r\n", "import { DayOfWeek } from \"../time/day-of-week\";\r\nimport { hour24To12, LocalTime } from \"../time/local-time\";\r\nimport { Timetable } from \"../timetable/timetable\";\r\nimport { TimetableChoices } from \"../timetable/timetable-choices\";\r\nimport { CanvasController } from \"./canvas-controller\";\r\nimport { drawIcon, drawLine, drawText, measureText, rem } from \"./utils\";\r\n\r\n/**\r\n * If a timetable block starts on a particular day, crosses midnight, and ends\r\n * after this time on the next day, then part of the block will be rendered in\r\n * the next day's column. Currently set to 3am. Note that this value will not be\r\n * used if any timetable blocks start before 3am, in that case the hour of the\r\n * earliest starting time will be where the split occurs.\r\n */\r\nexport const latestDaySplitHour = 3;\r\n\r\n/** The days of the week, from Monday to Friday. */\r\nexport const daysMonToFri = [\r\n  DayOfWeek.mon, DayOfWeek.tue, DayOfWeek.wed, DayOfWeek.thu, DayOfWeek.fri\r\n];\r\n\r\n/** The days of the week, from Monday to Sunday. */\r\nexport const daysMonToSun = [...daysMonToFri, DayOfWeek.sat, DayOfWeek.sun];\r\n\r\n/** The default days to show when the timetable is empty. */\r\nexport const defaultDays = daysMonToSun;\r\n\r\n/** The default start hour to use when the timetable is empty (8am). */\r\nexport const defaultStartHour = 8;\r\n\r\n/** The default end hour to use when the timetable is empty (8pm). */\r\nexport const defaultEndHour = 20;\r\n\r\n/** A start and end time number of hours. */\r\ntype HourRange = { start: number, end: number; }\r\n\r\n/** Handles rendering the timetable gridlines to the canvas. */\r\nexport class GridlinesRenderer {\r\n  /** The canvas to draw to. */\r\n  private readonly _canvas: CanvasController;\r\n\r\n  /** The days of the week to render on the grid. */\r\n  days: DayOfWeek[];\r\n\r\n  /** The first hour (24-hour format) to render on the grid. */\r\n  startHour: number;\r\n\r\n  /**\r\n   * The last hour (24-hour formal) to render on the grid. Can exceed 24 to show\r\n   * times beyond the end of the day.\r\n   */\r\n  endHour: number;\r\n\r\n  /**\r\n   * Creates a {@link GridlinesRenderer}.\r\n   * @param canvas The canvas to draw to.\r\n   */\r\n  constructor(canvas: CanvasController) {\r\n    this._canvas = canvas;\r\n    this.days = defaultDays;\r\n    this.startHour = defaultStartHour;\r\n    this.endHour = defaultEndHour;\r\n  }\r\n\r\n  /**\r\n   * Called whenever the timetable/choices changes.\r\n   * @param timetable The updated timetable.\r\n   */\r\n  onTimetableUpdate(timetable: TimetableChoices) {\r\n    if (timetable.timetable.classes.length > 0) {\r\n      const range = determineHourRange(timetable.timetable);\r\n      this.startHour = range.start;\r\n      this.endHour = range.end;\r\n\r\n      const splitTime = LocalTime.fromHour48(this.endHour, 0);\r\n      this.days = timetable.timetable.hasWeekendOptions(splitTime)\r\n        ? daysMonToSun\r\n        : daysMonToFri;\r\n    }\r\n    else {\r\n      this.days = defaultDays;\r\n      this.startHour = defaultStartHour;\r\n      this.endHour = defaultEndHour;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws the timetable to the canvas.\r\n   * @param ctx The canvas context.\r\n   */\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    this._drawGridlines(ctx);\r\n    this._drawDragPrompt(ctx);\r\n  }\r\n\r\n  /** Gets the dimensions for the gridlines measured in pixels. */\r\n  gridDimensions() {\r\n    const timesStart = rem(1);\r\n    const timesWidth = rem(2.5);\r\n    const x1 = timesStart + timesWidth;\r\n    const x2 = this._canvas.width - rem(1);\r\n    const daysStart = rem(1);\r\n    const daysHeight = rem(1.5);\r\n    const y1 = daysStart + daysHeight;\r\n    const y2 = this._canvas.height - rem(1.1 + 1.2 + 1.1);\r\n    const dayWidth = (x2 - x1) / this.days.length;\r\n    const hourHeight = (y2 - y1) / (this.endHour - this.startHour);\r\n\r\n    return {\r\n      timesStart: timesStart, timesWidth: timesWidth, x1: x1, x2: x2,\r\n      daysStart: daysStart, daysHeight: daysHeight, y1: y1, y2: y2,\r\n      dayWidth: dayWidth, hourHeight: hourHeight\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets the (x, y) coordinates for the given time on the given day of week.\r\n   * Automatically rolls times to their spots on the next column if appropriate.\r\n   * @param dayOfWeek The day of week.\r\n   * @param time The time (counts as next day of week if on next day).\r\n   */\r\n  timeLocation(dayOfWeek: DayOfWeek, time: LocalTime) {\r\n    // If the time occurs before the start hour, maybe it should be shown on\r\n    // yesterday's column.\r\n    if (time.fractionalHour48 < this.startHour) {\r\n      if (time.tomorrow().fractionalHour48 > this.endHour) { return null; }\r\n      const dayIndex = this.days.findIndex(d => d.equals(dayOfWeek.yesterday()));\r\n      if (dayIndex == -1) { return null; }\r\n      return { x: dayIndex, y: time.tomorrow().fractionalHour48 - this.startHour };\r\n    }\r\n\r\n    // If the time occurs afer the end hour, maybe it should be shown on\r\n    // tomorrow's column.\r\n    if (time.fractionalHour48 > this.endHour) {\r\n      if (time.yesterday().fractionalHour48 < this.startHour) { return null; }\r\n      const dayIndex = this.days.findIndex(d => d.equals(dayOfWeek.tomorrow()));\r\n      if (dayIndex == -1) { return null; }\r\n      return { x: dayIndex, y: time.yesterday().fractionalHour48 - this.startHour };\r\n    }\r\n\r\n    // Otherwise, show it on today's column.\r\n    const dayIndex = this.days.findIndex(d => d.equals(dayOfWeek));\r\n    if (dayIndex == -1) { return null; }\r\n    return { x: dayIndex, y: time.fractionalHour48 - this.startHour };\r\n  }\r\n\r\n  /**\r\n   * Draws the gridlines and day of week/time labels.\r\n   * @param ctx The canvas context.\r\n   */\r\n  private _drawGridlines(ctx: CanvasRenderingContext2D) {\r\n    const colorInk80 = this._canvas.css.colorInk80;\r\n    const colorInk30 = this._canvas.css.colorInk30;\r\n    const colorInk10 = this._canvas.css.colorInk10;\r\n\r\n    const {\r\n      x1, y1, x2, y2, dayWidth, daysStart, hourHeight, timesStart\r\n    } = this.gridDimensions();\r\n\r\n    // Draw the line under the column names.\r\n    drawLine(ctx, x1, y1, x2, y1, colorInk30, 2);\r\n\r\n    // Draw the vertical lines between columns.\r\n    for (let i = 1; i < this.days.length; i++) {\r\n      const dayDividerX = x1 + dayWidth * i;\r\n      drawLine(ctx, dayDividerX, y1, dayDividerX, y2, colorInk10, 2);\r\n    }\r\n\r\n    // Draw the day of week labels.\r\n    const fullLabelMinWidth = rem(4);\r\n    this.days.forEach((dow, i) => {\r\n      // Just use the initial instead of the acronym if the columns aren't wide\r\n      // enough.\r\n      const dayName = dow.codeName.toUpperCase();\r\n      const text = dayWidth > fullLabelMinWidth ? dayName : dayName[0];\r\n\r\n      // Draw the label.\r\n      const textWidth = measureText(ctx, text, 1, \"bold\");\r\n      const textX = x1 + dayWidth * i + (dayWidth - textWidth) / 2;\r\n      const textY = daysStart;\r\n      drawText(ctx, text, textX, textY, 1, \"bold\", colorInk80);\r\n    });\r\n\r\n    const times = [];\r\n    for (let i = this.startHour; i <= this.endHour; i++) {\r\n      const hour12 = hour24To12(i % 24);\r\n      const timeString = `${hour12.hour.toFixed()}${hour12.half}`;\r\n      times.push(timeString);\r\n    }\r\n\r\n    times.forEach((text, i) => {\r\n      // Draw the time labels.\r\n      const textX = timesStart;\r\n      const textY = y1 + hourHeight * i - rem(0.75) / 2;\r\n      drawText(ctx, text, textX, textY, 0.75, null, colorInk80);\r\n\r\n      // Draw the horizontal lines for each hour.\r\n      if (i != 0) {\r\n        const hourDividerY = y1 + hourHeight * i;\r\n        drawLine(ctx, x1, hourDividerY, x2, hourDividerY, colorInk10, 2);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Draws the \"Drag time blocks to switch options\" message.\r\n   * @param ctx The canvas context.\r\n   */\r\n  private _drawDragPrompt(ctx: CanvasRenderingContext2D) {\r\n    const width = this._canvas.width;\r\n    const height = this._canvas.height;\r\n    const color = this._canvas.css.colorInk80;\r\n\r\n    const iconSizeRem = 1.2;\r\n    const bottomMarginRem = 1.1;\r\n    const gapRem = 0.5;\r\n    const textYOffset = 1.0;\r\n\r\n    const text = \"Drag blocks to switch options\";\r\n\r\n    // Measure the width of the text.\r\n    const textWidth = measureText(ctx, text, 1, null);\r\n    const totalWidth = textWidth + rem(iconSizeRem) + rem(gapRem);\r\n\r\n    // Draw the \"Drag time blocks to switch options\" text.\r\n    const textX = (width - totalWidth) / 2 + rem(iconSizeRem) + rem(gapRem);\r\n    const textY = height - rem(bottomMarginRem + textYOffset);\r\n    drawText(ctx, text, textX, textY, 1, null, color);\r\n\r\n    // Draw the diagonal arrows icon.\r\n    const icon = new Path2D(\r\n      \"M21.92 2.62a1 1 0 0 0-.54-.54A1 1 0 0 0 21 2h-6a1 1 0 0 0 0 2h3.59L4 \" +\r\n      \"18.59V15a1 1 0 0 0-2 0v6a1 1 0 0 0 .08.38a1 1 0 0 0 .54.54A1 1 0 0 0 \" +\r\n      \"3 22h6a1 1 0 0 0 0-2H5.41L20 5.41V9a1 1 0 0 0 2 0V3a1 1 0 0 0-.08-.38Z\"\r\n    );\r\n    const iconX = (width - totalWidth) / 2;\r\n    const iconY = height - rem(bottomMarginRem + iconSizeRem);\r\n    const iconScale = rem(iconSizeRem) / 24;\r\n    drawIcon(ctx, icon, iconX, iconY, iconScale, color);\r\n  }\r\n}\r\n\r\n/**\r\n * Select the hour range to display on the grid, based on the earliest and\r\n * latest blocks that could be chosen in this timetable.\r\n * @param timetable The timetable to retrieve block times from.\r\n */\r\nfunction determineHourRange(timetable: Timetable): HourRange {\r\n  const earliestHour = timetable.earliestStartTime().startOfHour().hour48;\r\n  const latestHour = timetable.latestEndTime().endOfHour().hour48;\r\n  const split = Math.min(earliestHour, latestDaySplitHour);\r\n\r\n  if (latestHour <= 24 || latestHour <= split + 24) {\r\n    return {\r\n      start: earliestHour,\r\n      end: latestHour\r\n    };\r\n  }\r\n\r\n  return {\r\n    start: split,\r\n    end: split + 24\r\n  };\r\n}\r\n", "import { TimetableChoices } from \"../timetable/timetable-choices\";\r\nimport { BlocksRenderer } from \"./blocks-renderer\";\r\nimport { CanvasController } from \"./canvas-controller\";\r\nimport { GridlinesRenderer } from \"./gridlines-renderer\";\r\n\r\n/** Handles rendering the timetable to the canvas. */\r\nexport class TimetableRenderer {\r\n  /** The canvas to draw to. */\r\n  private readonly _canvas: CanvasController;\r\n\r\n  /** Draws the gridlines. */\r\n  private readonly _gridlines: GridlinesRenderer;\r\n\r\n  /** Draws the timetable blocks. */\r\n  private readonly _blocks: BlocksRenderer;\r\n\r\n  /**\r\n   * Creates a {@link TimetableRenderer}.\r\n   * @param canvas The canvas to draw to.\r\n   */\r\n  constructor(canvas: CanvasController) {\r\n    this._canvas = canvas;\r\n\r\n    this._gridlines = new GridlinesRenderer(canvas);\r\n    this._blocks = new BlocksRenderer(canvas, this._gridlines);\r\n  }\r\n\r\n  /**\r\n   * Called whenever the timetable/choices changes.\r\n   * @param timetable The updated timetable.\r\n   */\r\n  onTimetableUpdate(timetable: TimetableChoices) {\r\n    // Allow the gridlines to update the hour range and days of week being\r\n    // shown.\r\n    this._gridlines.onTimetableUpdate(timetable);\r\n\r\n    // Rearrange blocks if needed.\r\n    this._blocks.onTimetableUpdate(timetable);\r\n\r\n    this._canvas.markDirty();\r\n  }\r\n\r\n  /**\r\n   * Draws the timetable to the canvas.\r\n   * @param ctx The canvas context.\r\n   */\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    this._gridlines.draw(ctx);\r\n    this._blocks.draw(ctx);\r\n  }\r\n\r\n  /**\r\n   * Called when the mouse/touch is pressed on the canvas.\r\n   * @param e The event details.\r\n   */\r\n  onPointerDown(e: MouseEvent) {\r\n    this._blocks.onPointerDown(e);\r\n  }\r\n\r\n  /**\r\n   * Called when the mouse/touch is released on the canvas.\r\n   * @param e The event details.\r\n   */\r\n  onPointerUp(e: MouseEvent) {\r\n    this._blocks.onPointerUp(e);\r\n  }\r\n\r\n  /**\r\n   * Called when the mouse/touch moves on the canvas.\r\n   * @param e The event details.\r\n   */\r\n  onPointerMove(e: MouseEvent) {\r\n    this._blocks.onPointerMove(e);\r\n  }\r\n}\r\n", "import { Html } from \"../main\";\r\nimport { TimetableChoices } from \"../timetable/timetable-choices\";\r\nimport { Animation } from \"./animation\";\r\nimport { TimetableRenderer } from \"./timetable-renderer\";\r\n\r\n/**\r\n * Handles the sizing/rendering of the canvas, and running animations on the\r\n * canvas.\r\n */\r\nexport class CanvasController {\r\n  /** The current width of the canvas. */\r\n  width: number;\r\n\r\n  /** The current height of the canvas. */\r\n  height: number;\r\n\r\n  /** The current DPI ratio of the canvas. */\r\n  dpiRatio: number;\r\n\r\n  /** A reference to frequently used CSS values. */\r\n  readonly css: {\r\n    colorInk10: string,\r\n    colorInk30: string,\r\n    colorInk80: string,\r\n    colorOnAccent: string,\r\n    colorPaper20: string,\r\n    classColors: {\r\n      \"red\": { gradient1: string, gradient2: string, on: string },\r\n      \"orange\": { gradient1: string, gradient2: string, on: string },\r\n      \"yellow\": { gradient1: string, gradient2: string, on: string },\r\n      \"green\": { gradient1: string, gradient2: string, on: string },\r\n      \"cyan\": { gradient1: string, gradient2: string, on: string },\r\n      \"blue\": { gradient1: string, gradient2: string, on: string },\r\n      \"purple\": { gradient1: string, gradient2: string, on: string },\r\n      \"pink\": { gradient1: string, gradient2: string, on: string }\r\n    }\r\n  };\r\n\r\n  /** Controls what is rendered to the canvas. */\r\n  private _renderer: TimetableRenderer;\r\n\r\n  /** References to the HTML elements on the page. */\r\n  private readonly _html: Html;\r\n\r\n  /** A reference to the canvas 2D context. */\r\n  private _ctx: CanvasRenderingContext2D;\r\n\r\n  /**\r\n   * The value of Date.now in the last frame. Set to null initially.\r\n   */\r\n  private _lastFrameTime: number | null;\r\n\r\n  /** The running animations. */\r\n  private _animations: Animation[];\r\n\r\n  /** True if requestAnimationFrame has already been called. */\r\n  private _dirty: boolean;\r\n\r\n  /**\r\n   * Creates a {@link CanvasController}.\r\n   * @param html References to the HTML elements on the page.\r\n   */\r\n  constructor(html: Html) {\r\n    this._html = html;\r\n    this.width = 0;\r\n    this.height = 0;\r\n    this.dpiRatio = 1;\r\n\r\n\r\n    // Retrieve the canvas context from the HTML element.\r\n    this._ctx = (() => {\r\n      const maybe = html.canvas.getContext(\"2d\");\r\n      if (maybe == null) { throw new Error(\"Cannot get canvas context\"); }\r\n      return maybe;\r\n    })();\r\n\r\n    // Calculate the frequently use CSS values.\r\n    this.css = (() => {\r\n      const style = getComputedStyle(html.canvas);\r\n      return {\r\n        colorInk10: style.getPropertyValue(\"--color-ink-10\"),\r\n        colorInk30: style.getPropertyValue(\"--color-ink-30\"),\r\n        colorInk80: style.getPropertyValue(\"--color-ink-80\"),\r\n        colorOnAccent: style.getPropertyValue(\"--color-on-accent\"),\r\n        colorPaper20: style.getPropertyValue(\"--color-paper-20\"),\r\n        classColors: {\r\n          \"red\": {\r\n            gradient1: style.getPropertyValue(\"--color-red-gradient-1\"),\r\n            gradient2: style.getPropertyValue(\"--color-red-gradient-2\"),\r\n            on: style.getPropertyValue(\"--color-on-red\"),\r\n          },\r\n          \"orange\": {\r\n            gradient1: style.getPropertyValue(\"--color-orange-gradient-1\"),\r\n            gradient2: style.getPropertyValue(\"--color-orange-gradient-2\"),\r\n            on: style.getPropertyValue(\"--color-on-orange\"),\r\n          },\r\n          \"yellow\": {\r\n            gradient1: style.getPropertyValue(\"--color-yellow-gradient-1\"),\r\n            gradient2: style.getPropertyValue(\"--color-yellow-gradient-2\"),\r\n            on: style.getPropertyValue(\"--color-on-yellow\"),\r\n          },\r\n          \"green\": {\r\n            gradient1: style.getPropertyValue(\"--color-green-gradient-1\"),\r\n            gradient2: style.getPropertyValue(\"--color-green-gradient-2\"),\r\n            on: style.getPropertyValue(\"--color-on-green\"),\r\n          },\r\n          \"cyan\": {\r\n            gradient1: style.getPropertyValue(\"--color-cyan-gradient-1\"),\r\n            gradient2: style.getPropertyValue(\"--color-cyan-gradient-2\"),\r\n            on: style.getPropertyValue(\"--color-on-cyan\"),\r\n          },\r\n          \"blue\": {\r\n            gradient1: style.getPropertyValue(\"--color-blue-gradient-1\"),\r\n            gradient2: style.getPropertyValue(\"--color-blue-gradient-2\"),\r\n            on: style.getPropertyValue(\"--color-on-blue\"),\r\n          },\r\n          \"purple\": {\r\n            gradient1: style.getPropertyValue(\"--color-purple-gradient-1\"),\r\n            gradient2: style.getPropertyValue(\"--color-purple-gradient-2\"),\r\n            on: style.getPropertyValue(\"--color-on-purple\"),\r\n          },\r\n          \"pink\": {\r\n            gradient1: style.getPropertyValue(\"--color-pink-gradient-1\"),\r\n            gradient2: style.getPropertyValue(\"--color-pink-gradient-2\"),\r\n            on: style.getPropertyValue(\"--color-on-pink\"),\r\n          },\r\n        }\r\n      };\r\n    })();\r\n\r\n    this._lastFrameTime = null;\r\n    this._animations = [];\r\n\r\n    this._renderer = new TimetableRenderer(this);\r\n\r\n    this._html.canvas.addEventListener(\"pointerdown\",\r\n      (e) => this._renderer.onPointerDown(e)\r\n    );\r\n    this._html.canvas.addEventListener(\"pointerup\",\r\n      (e) => this._renderer.onPointerUp(e)\r\n    );\r\n    this._html.canvas.addEventListener(\"pointerleave\",\r\n      (e) => this._renderer.onPointerUp(e)\r\n    );\r\n    this._html.canvas.addEventListener(\"pointermove\",\r\n      (e) => this._renderer.onPointerMove(e)\r\n    );\r\n\r\n    this._dirty = true;\r\n    this._startDrawLoop();\r\n  }\r\n\r\n  /**\r\n   * Draw/redraw the content on the canvas if required. Only call this once upon\r\n   * creation.\r\n   */\r\n  private _startDrawLoop() {\r\n    // Make sure we draw again next frame (if needed).\r\n    requestAnimationFrame(() => this._startDrawLoop());\r\n\r\n    // Calculate how last since the last frame (used to animations) and store\r\n    // the current time for next time.\r\n    const now = Date.now();\r\n    const delta = (now - (this._lastFrameTime ?? now)) / 1000;\r\n    this._lastFrameTime = now;\r\n\r\n    // If there's nothing new to draw (and no animations running) then skip\r\n    // drawing.\r\n    if (!this._dirty && this._animations.length < 1) {\r\n      return;\r\n    }\r\n\r\n    // Otherwise, clear the dirty flag and draw.\r\n    this._dirty = false;\r\n    this._draw(delta);\r\n  }\r\n\r\n  private _draw(delta: number) {\r\n    // Scale the context based on the DPI ratio to ensure consistent sizing for\r\n    // high-DPI displays. Apply as a matrix so we don't need to do it for every\r\n    // measurement individually.\r\n    this._ctx.save();\r\n    this._ctx.clearRect(\r\n      0, 0, this.width * this.dpiRatio, this.height * this.dpiRatio\r\n    );\r\n    this._ctx.scale(this.dpiRatio, this.dpiRatio);\r\n\r\n    // If there are animations to process, do those.\r\n    if (this._animations.length > 0) {\r\n      const animationsToDelete: Animation[] = [];\r\n\r\n      // Run each animation. Add them to a list of animations to delete if done.\r\n      this._animations.forEach(a => {\r\n        a.run(delta);\r\n        if (a.isDone()) {\r\n          animationsToDelete.push(a);\r\n        }\r\n      });\r\n\r\n      // Remove all completed animations from the list.\r\n      animationsToDelete.forEach(a => {\r\n        this._animations.splice(this._animations.indexOf(a), 1);\r\n      });\r\n    }\r\n\r\n    // Do all drawing!\r\n    this._renderer.draw(this._ctx);\r\n\r\n    // Restore the canvas to the default transform once drawing is complete. This\r\n    // doesn't seem necessary.\r\n    this._ctx.restore();\r\n  }\r\n\r\n  /** Called when something wants a draw to occur on the next frame. */\r\n  markDirty() {\r\n    this._dirty = true;\r\n  }\r\n\r\n  /**\r\n   * Fit the canvas to it's container. Must be called on page load and everytime\r\n   * the page resizes.\r\n   */\r\n  fitCanvas() {\r\n    // Get the width/height available.\r\n    const containerSize = this._html.canvasContainer.getBoundingClientRect();\r\n    this.width = containerSize.width;\r\n    this.height = containerSize.height;\r\n\r\n    // Get the canvas context. Throw if null (shouldn't be on any SLIGHTLY modern\r\n    // browser).\r\n    const ctx = this._html.canvas.getContext(\"2d\");\r\n    if (ctx == null) { throw new Error(\"Cannot get canvas context\"); }\r\n    this.dpiRatio = calculateDpiRatio(ctx);\r\n\r\n    this._html.canvas.style.width = `${this.width}px`;\r\n    this._html.canvas.style.height = `${this.height}px`;\r\n    this._html.canvas.width = this.width * this.dpiRatio;\r\n    this._html.canvas.height = this.height * this.dpiRatio;\r\n\r\n    // Now the size has changed, redraw everything.\r\n    this.markDirty();\r\n  }\r\n\r\n  /**\r\n   * Makes the canvas aware of an animation, so it can begin animating it.\r\n   * @param animation The animation to start.\r\n   */\r\n  startAnimation(animation: Animation) {\r\n    this._animations.push(animation);\r\n  }\r\n\r\n  /**\r\n   * Premuturely cancels an animation. Most common use case is where for\r\n   * animations that are replaced by another because the value to animate to\r\n   * changes mid-animation.\r\n   * @param animation The animation to cancel.\r\n   */\r\n  cancelAnimation(animation: Animation) {\r\n    const index = this._animations.indexOf(animation);\r\n    if (index == -1) {\r\n      throw new Error(\"Couldn't find that animation to cancel.\");\r\n    }\r\n    this._animations.splice(index, 1);\r\n  }\r\n\r\n  /**\r\n   * Called whenever the timetable/choices changes.\r\n   * @param timetable The updated timetable.\r\n   */\r\n  onTimetableUpdate(timetable: TimetableChoices) {\r\n    this._renderer.onTimetableUpdate(timetable);\r\n  }\r\n}\r\n\r\n/**\r\n * Uses `devicePixelRatio` and `backingStorePixelRatio` to calculate how to\r\n * scale the canvas appropriately for high DPI displays.\r\n */\r\nfunction calculateDpiRatio(ctx: CanvasRenderingContext2D) {\r\n  const dpr = window.devicePixelRatio ?? 1;\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const bsr = (ctx as any).backingStorePixelRatio ?? 1;\r\n  return dpr / bsr;\r\n};\r\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;", "import { TimetableClass } from \"./timetable/timetable-class\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { TimetableOption } from \"./timetable/timetable-option\";\r\nimport { getCurrentTimetable, updateTimetable } from \"./main\";\r\n\r\nexport type OptionRadioMapping = {\r\n  option: TimetableOption,\r\n  $radio: HTMLInputElement\r\n};\r\n\r\n/** Handles creating and managing a single class's UI in the controls. */\r\nexport class ClassUIController {\r\n  /** The timetable class. */\r\n  readonly timetableClass: TimetableClass;\r\n\r\n  /**\r\n   * The div containing the UI as created by {@link ClassUIController.create}.\r\n   */\r\n  readonly $div: HTMLDivElement;\r\n\r\n  /** The radio input used when no choice is selected. */\r\n  private readonly _$noChoiceInput: HTMLInputElement;\r\n\r\n  /** A list of each option in the class and the corresponding radio button. */\r\n  private readonly _optionRadios: OptionRadioMapping[];\r\n\r\n  /**\r\n   * Creates a {@link ClassUIController}.\r\n   * @param $div The div containing the UI as created by\r\n   * {@link ClassUIController.create}.\r\n   * @param $noChoiceInput The radio input used when no choice is selected.\r\n   * @param optionRadios A list of each option in the class and the\r\n   * corresponding radio button.\r\n   */\r\n  constructor(timetableClass: TimetableClass, $div: HTMLDivElement,\r\n    $noChoiceInput: HTMLInputElement, optionRadios: OptionRadioMapping[]) {\r\n\r\n    this.timetableClass = timetableClass;\r\n    this.$div = $div;\r\n    this._$noChoiceInput = $noChoiceInput;\r\n    this._optionRadios = optionRadios;\r\n  }\r\n\r\n  /**\r\n   * Highlights the button for the given option.\r\n   * @param option The option.\r\n   */\r\n  select(option: TimetableOption | null) {\r\n    // If the caller wants the \"null\" (no-choice) option selected, select it.\r\n    if (option == null) {\r\n      if (!this._$noChoiceInput.checked) {\r\n        this._$noChoiceInput.checked = true;\r\n      }\r\n      return;\r\n    }\r\n\r\n    const optionRadio = this._optionRadios.find(o => o.option.equals(option));\r\n\r\n    // Should never happen. The caller should always pass a valid option.\r\n    if (optionRadio == null) { throw new Error(); }\r\n\r\n    if (!optionRadio.$radio.checked) {\r\n      optionRadio.$radio.checked = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link ClassUIController} for the given class.\r\n   * @param classData The class data.\r\n   */\r\n  static create(classData: TimetableClass): ClassUIController {\r\n    // The class name label (wrapped in a one-line).\r\n    const $name = document.createElement(\"h3\");\r\n    $name.textContent = classData.name;\r\n    const $nameOL = document.createElement(\"div\");\r\n    $nameOL.className = \"one-line\";\r\n    $nameOL.append($name);\r\n\r\n    // The class name label (wrapped in a one-line).\r\n    const $type = document.createElement(\"h4\");\r\n    $type.textContent = classData.type.toUpperCase();\r\n    const $typeOL = document.createElement(\"div\");\r\n    $typeOL.className = \"one-line\";\r\n    $typeOL.append($type);\r\n\r\n    // The options container.\r\n    const $options = document.createElement(\"div\");\r\n    $options.className = \"options\";\r\n\r\n    // The option labels.\r\n    const radiosName = uuidv4();\r\n    const createOptionUI = ($inner: HTMLElement) => {\r\n      const $input = document.createElement(\"input\");\r\n      $input.type = \"radio\";\r\n      $input.name = radiosName;\r\n      $input.autocomplete = \"off\";\r\n\r\n      const $button = document.createElement(\"div\");\r\n      $button.className = \"button\";\r\n      $button.append($inner);\r\n\r\n      const $label = document.createElement(\"label\");\r\n      $label.className = \"option\";\r\n      $label.append($input, $button);\r\n\r\n      return { $label: $label, $input: $input };\r\n    };\r\n    const optionUIs = classData.options.map(o => {\r\n      const $text = document.createElement(\"p\");\r\n      $text.textContent = o.toDisplayString();\r\n      const $textOL = document.createElement(\"div\");\r\n      $textOL.className = \"one-line\";\r\n      $textOL.append($text);\r\n\r\n      const ui = createOptionUI($textOL);\r\n\r\n      ui.$input.addEventListener(\"click\", () => {\r\n        updateTimetable(getCurrentTimetable().withChoice(classData, o));\r\n      });\r\n\r\n      return { option: o, $label: ui.$label, $input: ui.$input };\r\n    });\r\n    const noChoiceOptionUI = (() => {\r\n      const $text = document.createElement(\"p\");\r\n      $text.textContent = \"None\";\r\n      const $textOL = document.createElement(\"div\");\r\n      $textOL.className = \"one-line\";\r\n      $textOL.append($text);\r\n\r\n      const ui = createOptionUI($textOL);\r\n\r\n      ui.$input.addEventListener(\"click\", () => {\r\n        updateTimetable(getCurrentTimetable().withChoice(classData, null));\r\n      });\r\n\r\n      return { $label: ui.$label, $input: ui.$input };\r\n    })();\r\n    $options.append(noChoiceOptionUI.$label, ...optionUIs.map(o => o.$label));\r\n\r\n    // The parent div.\r\n    const $div = document.createElement(\"div\");\r\n    $div.className = \"class\";\r\n    $div.append($nameOL, $typeOL, $options);\r\n\r\n    const optionRadios = optionUIs.map(o => {\r\n      return { option: o.option, $radio: o.$input };\r\n    });\r\n    return new ClassUIController(\r\n      classData, $div, noChoiceOptionUI.$input, optionRadios\r\n    );\r\n  }\r\n}\r\n", "import { ClassUIController } from \"./class-ui-controller\";\r\nimport { Html } from \"./main\";\r\nimport { TimetableChoices } from \"./timetable/timetable-choices\";\r\n\r\n/** Manages the controls UI (the side-panel). */\r\nexport class ControlsController {\r\n  /** References to the HTML elements on the page. */\r\n  private readonly _html: Html;\r\n\r\n  /**\r\n   * A copy of the currently displayed timetable purely for comparison to the\r\n   * new data.\r\n   */\r\n  private _prevTimetable: TimetableChoices | null;\r\n\r\n  private _classUIs: ClassUIController[];\r\n\r\n  /**\r\n   * Creates a {@link ControlsController}.\r\n   * @param html References to the HTML elements on the page.\r\n   */\r\n  constructor(html: Html) {\r\n    this._html = html;\r\n    this._prevTimetable = null;\r\n    this._classUIs = [];\r\n  }\r\n\r\n  /**\r\n   * Called whenever the timetable/choices changes.\r\n   * @param timetable The updated timetable.\r\n   */\r\n  onTimetableUpdate(timetable: TimetableChoices) {\r\n    // Avoid recreating the UI for each class if the timetable hasn't changed.\r\n    if (this._prevTimetable == null ||\r\n      !timetable.timetable.equals(this._prevTimetable.timetable)) {\r\n\r\n      // Add the \"non-empty\" class to the controls (hides the startup message).\r\n      this._html.controls.classList.toggle(\r\n        \"non-empty\", timetable.timetable.classes.length != 0\r\n      );\r\n\r\n      this._classUIs = timetable.timetable.classes.map(cl => {\r\n        const choice = timetable.choices.find(ch => ch.timetableClass.equals(cl));\r\n\r\n        // Should never happen. TimetableChoice ensures there's a choice for\r\n        // each class.\r\n        if (choice == null) { throw new Error(); }\r\n\r\n        const ui = ClassUIController.create(cl);\r\n        ui.select(choice.option);\r\n\r\n        return ui;\r\n      });\r\n\r\n      this._html.classes.replaceChildren(...this._classUIs.map(u => u.$div));\r\n    }\r\n\r\n    // Update the selected options regardless.\r\n    timetable.choices.forEach(ch => {\r\n      const classUI = this._classUIs.find(\r\n        u => u.timetableClass.equals(ch.timetableClass)\r\n      );\r\n\r\n      // Should never happen. A class UI is made for each class in the timetable\r\n      // and a choice cannot have a class that isn't in the timetable.\r\n      if (classUI == null) { throw new Error(); }\r\n\r\n      classUI.select(ch.option);\r\n    });\r\n\r\n    this._prevTimetable = timetable;\r\n  }\r\n}\r\n", "var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    get errors() {\n        return this.issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be greater than ${issue.inclusive ? `or equal to ` : ``}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be greater than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.minimum)}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be less than ${issue.inclusive ? `or equal to ` : ``}${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be smaller than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.maximum)}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: issueData.message || errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap,\n            ctx.schemaErrorMap,\n            getErrorMap(),\n            errorMap,\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            syncPairs.push({\n                key: await pair.key,\n                value: await pair.value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (typeof value.value !== \"undefined\" || pair.alwaysSet) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== undefined && x instanceof Promise;\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        return this._path.concat(this._key);\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        const error = new ZodError(ctx.common.issues);\n        return { success: false, error };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        if (typeof ctx.data === \"undefined\") {\n            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };\n        }\n        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this.superRefine = this._refinement;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.default = this.default.bind(this);\n        this.describe = this.describe.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n    }\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: [], parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    optional() {\n        return ZodOptional.create(this);\n    }\n    nullable() {\n        return ZodNullable.create(this);\n    }\n    nullish() {\n        return this.optional().nullable();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this);\n    }\n    or(option) {\n        return ZodUnion.create([this, option]);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(undefined),\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n// eslint-disable-next-line\nconst emailRegex = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\nclass ZodString extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n        /**\n         * @deprecated Use z.string().min(1) instead.\n         * @see {@link ZodString.min}\n         */\n        this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));\n        this.trim = () => new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            }\n            //\n            );\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this.min(len, message).max(len, message);\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\");\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.bigint,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBigInt.create = (params) => {\n    return new ZodBigInt({\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all(ctx.data.map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = ctx.data.map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return this.min(len, message).max(len, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////\n/////////////////////////////////////////\n//////////                     //////////\n//////////      ZodObject      //////////\n//////////                     //////////\n/////////////////////////////////////////\n/////////////////////////////////////////\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second,\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst AugmentFactory = (def) => (augmentation) => {\n    return new ZodObject({\n        ...def,\n        shape: () => ({\n            ...def.shape(),\n            ...augmentation,\n        }),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return ZodArray.create(deepPartialify(schema.element));\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        this.augment = AugmentFactory(this._def);\n        this.extend = AugmentFactory(this._def);\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    syncPairs.push({\n                        key,\n                        value: await pair.value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        // const mergedShape = objectUtil.mergeShapes(\n        //   this._def.shape(),\n        //   merging._def.shape()\n        // );\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).map((key) => {\n            // only add to shape if key corresponds to an element of the current shape\n            if (this.shape[key])\n                shape[key] = this.shape[key];\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).map((key) => {\n            if (util.objectKeys(mask).indexOf(key) === -1) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        if (mask) {\n            util.objectKeys(this.shape).map((key) => {\n                if (util.objectKeys(mask).indexOf(key) === -1) {\n                    newShape[key] = this.shape[key];\n                }\n                else {\n                    newShape[key] = this.shape[key].optional();\n                }\n            });\n            return new ZodObject({\n                ...this._def,\n                shape: () => newShape,\n            });\n        }\n        else {\n            for (const key in this.shape) {\n                const fieldSchema = this.shape[key];\n                newShape[key] = fieldSchema.optional();\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required() {\n        const newShape = {};\n        for (const key in this.shape) {\n            const fieldSchema = this.shape[key];\n            let newField = fieldSchema;\n            while (newField instanceof ZodOptional) {\n                newField = newField._def.innerType;\n            }\n            newShape[key] = newField;\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.options.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: this.validDiscriminatorValues,\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get validDiscriminatorValues() {\n        return Array.from(this.options.keys());\n    }\n    get options() {\n        return this._def.options;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, types, params) {\n        // Get all the valid discriminator values\n        const options = new Map();\n        try {\n            types.forEach((type) => {\n                const discriminatorValue = type.shape[discriminator].value;\n                options.set(discriminatorValue, type);\n            });\n        }\n        catch (e) {\n            throw new Error(\"The discriminator value could not be extracted from all the provided schemas\");\n        }\n        // Assert that all the discriminator values are unique\n        if (options.size !== types.length) {\n            throw new Error(\"Some of the discriminator values are not unique\");\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = ctx.data\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            return OK(async (...args) => {\n                const error = new ZodError([]);\n                const parsedArgs = await this._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await fn(...parsedArgs);\n                const parsedReturns = await this._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            return OK((...args) => {\n                const parsedArgs = this._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = fn(...parsedArgs.data);\n                const parsedReturns = this._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (this._def.values.indexOf(input.data) === -1) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (nativeEnumValues.indexOf(input.data) === -1) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then((processed) => {\n                    return this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                });\n            }\n            else {\n                return this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc\n            // effect: RefinementEffect<any>\n            ) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                // if (base.status === \"aborted\") return INVALID;\n                // if (base.status === \"dirty\") {\n                //   return { status: \"dirty\", value: base.value };\n                // }\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    // if (base.status === \"aborted\") return INVALID;\n                    // if (base.status === \"dirty\") {\n                    //   return { status: \"dirty\", value: base.value };\n                    // }\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nconst custom = (check, params = {}, fatal) => {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            if (!check(data)) {\n                const p = typeof params === \"function\" ? params(data) : params;\n                const p2 = typeof p === \"string\" ? { message: p } : p;\n                ctx.addIssue({ code: \"custom\", ...p2, fatal });\n            }\n        });\n    return ZodAny.create();\n};\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\n// new approach that works for abstract classes\n// but required TS 4.4+\n// abstract class Class {\n//   constructor(..._: any[]) {}\n// }\n// const instanceOfType = <T extends typeof Class>(\nconst instanceOfType = (cls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params, true);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst NEVER = INVALID;\n\nvar mod = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    getParsedType: getParsedType,\n    ZodParsedType: ZodParsedType,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    ZodType: ZodType,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    get objectUtil () { return objectUtil; },\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPromise, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, custom, dateType as date, mod as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, voidType as void, mod as z };\n", "/** Represents a color that a class on the timetable can use. */\r\nexport type TimetableColor = typeof TimetableColors[number];\r\n\r\n/** An array of all the possible colors that a timetable class can be. */\r\nexport const TimetableColors = [\r\n  \"red\", \"orange\", \"yellow\", \"green\", \"cyan\", \"blue\", \"purple\", \"pink\"\r\n] as const;\r\n\r\n/**\r\n * Returns true for any valid {@link TimetableColor}.\r\n * @param val The string to check.\r\n */\r\nexport function isTimetableColor(val: string): val is TimetableColor {\r\n  return (TimetableColors as readonly string[]).includes(val);\r\n}\r\n\r\n/**\r\n * Returns the string as a {@link TimetableColor}, or throws an error\r\n * is it is invalid.\r\n * @param val The string to check.\r\n */\r\nexport function toTimetableColor(val: string): TimetableColor {\r\n  if (isTimetableColor(val)) { return val; }\r\n  throw badTimetableColor(val);\r\n}\r\n\r\n/** Invalid timetable color \"`val`\". */\r\nconst badTimetableColor = (val: string) => new Error(\r\n  `Invalid timetable color \"${val}\"`\r\n);\r\n", "import { LocalTime } from \"../time/local-time\";\r\n\r\n/** The error object used when an invalid Timetable data object is created. */\r\nexport class TimetableError extends Error {\r\n  /**\r\n   * Creates a {@link TimeError}.\r\n   * @param message The error message.\r\n   */\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = \"TimetableError\";\r\n  }\r\n\r\n  /** Duration of `durationMins` minutes is not allowed. */\r\n  static badDuration(durationMins: number): TimetableError {\r\n    return new TimetableError(\r\n      `Duration of ${durationMins} minutes is not allowed`\r\n    );\r\n  }\r\n\r\n  /** A block start time of \"`time`\" is not allowed. */\r\n  static blockBadStartTime(time: LocalTime): TimetableError {\r\n    return new TimetableError(\r\n      `A block start time of \"${time.toString(true)}\" is not allowed`\r\n    );\r\n  }\r\n\r\n  /** An option cannot have no time blocks. */\r\n  static optionNoBlocks(): TimetableError {\r\n    return new TimetableError(\r\n      `An option cannot have no time blocks`\r\n    );\r\n  }\r\n\r\n  /** An option cannot have duplicate time blocks. */\r\n  static optionDuplicateBlocks(): TimetableError {\r\n    return new TimetableError(\r\n      `An option cannot have duplicate time blocks`\r\n    );\r\n  }\r\n\r\n  /** A class cannot have no timeslot options. */\r\n  static classNoOptions(): TimetableError {\r\n    return new TimetableError(\r\n      `A class cannot have no timeslot options`\r\n    );\r\n  }\r\n\r\n  /** A class cannot have duplicate options. */\r\n  static classDuplicateOptions(): TimetableError {\r\n    return new TimetableError(\r\n      `A class cannot have duplicate options`\r\n    );\r\n  }\r\n\r\n  /** A timetable cannot have duplicate classes. */\r\n  static timetableDuplicateClasses(): TimetableError {\r\n    return new TimetableError(\r\n      `A timetable cannot have duplicate classes`\r\n    );\r\n  }\r\n\r\n  /** \"`val`\" is not a valid time block. */\r\n  static badBlockString(val: string): TimetableError {\r\n    return new TimetableError(\r\n      `\"${val}\" is not a valid time block`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * The classes in the choices array do not match the classes in the timetable.\r\n   */\r\n  static classesChoicesMismatch(): TimetableError {\r\n    return new TimetableError(\r\n      `The classes in the choices array do not match the classes in the ` +\r\n      `timetable`\r\n    );\r\n  }\r\n\r\n  /** The choices array provided had the same class twice. */\r\n  static duplicatedClassInChoices(): TimetableError {\r\n    return new TimetableError(\r\n      `The choices array provided had the same class twice`\r\n    );\r\n  }\r\n\r\n  /** The chosen option doesn't exist for this class. */\r\n  static optionMissing(): TimetableError {\r\n    return new TimetableError(\r\n      `The chosen option doesn't exist for this class`\r\n    );\r\n  }\r\n\r\n  /** The number of choices in the array must match the number of classes. */\r\n  static badChoiceArrayLength(): TimetableError {\r\n    return new TimetableError(\r\n      ` The number of choices in the array must match the number of classes`\r\n    );\r\n  }\r\n\r\n  /** The choice index \"`index`\" was out of range for this class. */\r\n  static badChoiceIndex(index: number): TimetableError {\r\n    return new TimetableError(\r\n      `The choice index \"${index}\" was out of range for this class`\r\n    );\r\n  }\r\n}\r\n", "import { parseIntNull } from \"schel-d-utils\";\r\nimport { DayOfWeek } from \"../time/day-of-week\";\r\nimport { LocalTime } from \"../time/local-time\";\r\nimport { TimetableError } from \"./timetable-error\";\r\n\r\n/** Represents a time block that is part of a timetable option. Is immutable. */\r\nexport class TimetableBlock {\r\n  /** The day of the week. */\r\n  readonly dayOfWeek: DayOfWeek;\r\n\r\n  /** The start time. Cannot occur on the next day. */\r\n  readonly startTime: LocalTime;\r\n\r\n  /** The duration in minutes. Must be an integer between 1 min - 24 hrs. */\r\n  readonly durationMins: number;\r\n\r\n  /** True, if this time block is completed online. */\r\n  readonly online: boolean;\r\n\r\n  /**\r\n   * Creates a {@link TimetableBlock}.\r\n   * @param dayOfWeek The day of the week.\r\n   * @param startTime The start time.\r\n   * @param durationMins The duration in minutes. Must be an integer between 1\r\n   * min - 24 hrs.\r\n   * @param online True, if this time block is completed online.\r\n   */\r\n  constructor(dayOfWeek: DayOfWeek, startTime: LocalTime, durationMins: number,\r\n    online: boolean) {\r\n\r\n    if (startTime.isNextDay) {\r\n      throw TimetableError.blockBadStartTime(startTime);\r\n    }\r\n    if (!Number.isInteger(durationMins) || durationMins < 1 || durationMins > 24 * 60) {\r\n      throw TimetableError.badDuration(durationMins);\r\n    }\r\n\r\n    this.dayOfWeek = dayOfWeek;\r\n    this.startTime = startTime;\r\n    this.durationMins = durationMins;\r\n    this.online = online;\r\n  }\r\n\r\n  /**\r\n   * Returns the end time of this timetable block (if the end time occurs on the\r\n   * next day, the next day flag will be set inside the local time).\r\n   */\r\n  get endTime(): LocalTime {\r\n    return new LocalTime(this.startTime.minuteOfDay + this.durationMins);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given object has an identical value to this one.\r\n   * @param other The other object.\r\n   */\r\n  equals(other: TimetableBlock) {\r\n    return this.dayOfWeek.equals(other.dayOfWeek)\r\n      && this.startTime.equals(other.startTime)\r\n      && this.durationMins === other.durationMins\r\n      && this.online === other.online;\r\n  }\r\n\r\n  /**\r\n   * Parses a {@link TimetableBlock} from a string, e.g. \"mon 13:00 2h online\"\r\n   * or \"fri 9:30 90m\". Returns null on failure.\r\n   * @param value The string, e.g. \"mon 13:00 2h online\" or \"fri 9:30 90m\".\r\n   */\r\n  static tryFromString(value: string): TimetableBlock | null {\r\n    const bits = value.trim().split(\" \").filter(s => s.length != 0);\r\n    if (bits.length != 3 && bits.length != 4) { return null; }\r\n\r\n    const dayOfWeek = DayOfWeek.tryFromCodeName(bits[0]);\r\n    if (dayOfWeek == null) { return null; }\r\n\r\n    const startTime = LocalTime.tryParse(bits[1]);\r\n    if (startTime == null) { return null; }\r\n\r\n    const durationStr = bits[2];\r\n    const durationNum = parseIntNull(durationStr.substring(0, durationStr.length - 1));\r\n    if (durationNum == null) { return null; }\r\n    const durationMins = durationStr.endsWith(\"h\") ? durationNum * 60 : durationNum;\r\n\r\n    let online = false;\r\n    if (bits.length == 4) {\r\n      if (bits[3] != \"online\") { return null; }\r\n      online = true;\r\n    }\r\n\r\n    return new TimetableBlock(dayOfWeek, startTime, durationMins, online);\r\n  }\r\n\r\n  /**\r\n   * Parses a {@link TimetableBlock} from a string, e.g. \"mon 13:00 2h online\"\r\n   * or \"fri 9:30 90m\". Throws a {@link TimetableError} on failure.\r\n   * @param value The string, e.g. \"mon 13:00 2h online\" or \"fri 9:30 90m\".\r\n   */\r\n  static fromString(value: string): TimetableBlock {\r\n    const block = TimetableBlock.tryFromString(value);\r\n    if (block == null) { throw TimetableError.badBlockString(value); }\r\n    return block;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given string is a valid timetable block string, e.g.\r\n   * \"mon 13:00 2h online\" or \"fri 9:30 90m\".\r\n   * @param value The string, e.g. \"mon 13:00 2h online\" or \"fri 9:30 90m\".\r\n   */\r\n  static isValidString(value: string): boolean {\r\n    return this.tryFromString(value) != null;\r\n  }\r\n\r\n  /**\r\n   * Converts this timetable block to a string, e.g. \"mon 13:00 2h online\" or\r\n   * \"fri 9:30 90m\".\r\n   */\r\n  toString(): string {\r\n    const dow = this.dayOfWeek.codeName;\r\n    const time = this.startTime.toString(false);\r\n\r\n    // Use hours for duration if possible.\r\n    const duration = this.durationMins % 60 == 0\r\n      ? `${this.durationMins / 60}h`\r\n      : `${this.durationMins}m`;\r\n\r\n    return this.online\r\n      ? `${dow} ${time} ${duration} online`\r\n      : `${dow} ${time} ${duration}`;\r\n  }\r\n\r\n  /**\r\n   * Converts this timetable block to a simple human-friendly string. The string\r\n   * returned doesn't include the duration.\r\n   */\r\n  toDisplayString(): string {\r\n    // Like the codename, but with a starting capital letter.\r\n    const dow = this.dayOfWeek.name.substring(0, 3);\r\n\r\n    const onlineSuffix = this.online ? \" online\" : \"\";\r\n    return `${dow} ${this.startTime.to12HString()}${onlineSuffix}`;\r\n  }\r\n}\r\n", "import { areUnique, arraysMatch } from \"schel-d-utils\";\r\nimport { z } from \"zod\";\r\nimport { DayOfWeek } from \"../time/day-of-week\";\r\nimport { LocalTime } from \"../time/local-time\";\r\nimport { TimetableBlock } from \"./timetable-block\";\r\nimport { TimetableError } from \"./timetable-error\";\r\n\r\n/**\r\n * Represents a timetable option for a class. May contain multiple blocks.\r\n * Should be treated as immutable (despite blocks technically being mutable).\r\n */\r\nexport class TimetableOption {\r\n  /** The timetable blocks this option consists of. Must contain at least 1. */\r\n  readonly blocks: TimetableBlock[];\r\n\r\n  /** Zod schema for parsing from JSON. */\r\n  static readonly json = z.union([\r\n    z.string()\r\n      .refine(s => TimetableBlock.isValidString(s))\r\n      .transform(s => [TimetableBlock.fromString(s)]),\r\n    z.string()\r\n      .refine(s => TimetableBlock.isValidString(s))\r\n      .transform(s => TimetableBlock.fromString(s))\r\n      .array()\r\n      .min(1)\r\n  ]).transform(x =>\r\n    new TimetableOption(x)\r\n  );\r\n\r\n  /** Zod schema for parsing from JSON but only using raw types. */\r\n  static readonly rawJson = z.union([\r\n    z.string(),\r\n    z.string().array()\r\n  ]);\r\n\r\n  /**\r\n   * Creates a {@link TimetableOption}.\r\n   * @param blocks The timetable blocks this option consists of. Must contain at\r\n   * least 1.\r\n   */\r\n  constructor(blocks: TimetableBlock[]) {\r\n    if (blocks.length < 1) {\r\n      throw TimetableError.optionNoBlocks();\r\n    }\r\n\r\n    // Each block in this option must be unique.\r\n    if (!areUnique(blocks, (a, b) => a.equals(b))) {\r\n      throw TimetableError.optionDuplicateBlocks();\r\n    }\r\n\r\n    this.blocks = blocks;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given object has an identical value to this one.\r\n   * @param other The other object.\r\n   */\r\n  equals(other: TimetableOption) {\r\n    return arraysMatch(this.blocks, other.blocks, (a, b) => a.equals(b));\r\n  }\r\n\r\n  /** Convert to JSON object according to {@link TimetableOption.rawJson}. */\r\n  toJSON(): z.infer<typeof TimetableOption.rawJson> {\r\n    // If there's just one block output the single string, otherwise output the\r\n    // array of strings.\r\n    return this.blocks.length == 1\r\n      ? this.blocks[0].toString()\r\n      : this.blocks.map(b => b.toString());\r\n  }\r\n\r\n  /**\r\n   * Converts this timetable option to a simple human-friendly string. The\r\n   * string returned doesn't include the durations of the blocks.\r\n   */\r\n  toDisplayString(): string {\r\n    return this.blocks.map(b => b.toDisplayString()).join(\" & \");\r\n  }\r\n\r\n  /**\r\n   * Returns true if the timetable has classes with weekend options.\r\n   * @param daySplitTime The time after which the end time will be shown on the\r\n   * next day. The time passed here should have the next day flag set.\r\n   */\r\n  hasWeekendBlocks(daySplitTime: LocalTime): boolean {\r\n    return this.blocks.some(b => b.dayOfWeek.isWeekend ||\r\n      (b.dayOfWeek.equals(DayOfWeek.fri) && b.endTime.isAfter(daySplitTime)));\r\n  }\r\n\r\n  /** Returns the time the earliest block in this option starts. */\r\n  earliestStartTime(): LocalTime {\r\n    return LocalTime.earliest(...this.blocks.map(x => x.startTime));\r\n  }\r\n\r\n  /** Returns the time the latest block in this option ends. */\r\n  latestEndTime(): LocalTime {\r\n    return LocalTime.latest(...this.blocks.map(x => x.endTime));\r\n  }\r\n}\r\n", "import { areUnique, arraysMatch } from \"schel-d-utils\";\r\nimport { z } from \"zod\";\r\nimport { LocalTime } from \"../time/local-time\";\r\nimport { TimetableColor, TimetableColors } from \"./timetable-class-color\";\r\nimport { TimetableError } from \"./timetable-error\";\r\nimport { TimetableOption } from \"./timetable-option\";\r\n\r\n/**\r\n * Represents a class (e.g. Advanced Tin Opening Workshop). Should be\r\n * treated as immutable (despite arrays technically being mutable).\r\n */\r\nexport class TimetableClass {\r\n  /** The class name, e.g. \"Advanced Tin Opening\". */\r\n  readonly name: string;\r\n\r\n  /** The class type, e.g. \"Workshop\". */\r\n  readonly type: string;\r\n\r\n  /** The color this class will be shown on the timetable. */\r\n  readonly color: TimetableColor;\r\n\r\n  /** The timetable options. Must have at least 1. */\r\n  readonly options: TimetableOption[];\r\n\r\n  /** True, if not adding the class to the timetable is an option. */\r\n  readonly optional: boolean;\r\n\r\n  /** Zod schema for parsing from JSON. */\r\n  static readonly json = z.object({\r\n    name: z.string(),\r\n    type: z.string(),\r\n    color: z.enum(TimetableColors),\r\n    options: TimetableOption.json.array().min(1),\r\n    optional: z.boolean().optional()\r\n  }).transform(x =>\r\n    new TimetableClass(x.name, x.type, x.color, x.options, x.optional ?? false)\r\n  );\r\n\r\n  /** Zod schema for parsing from JSON but only using raw types. */\r\n  static readonly rawJson = z.object({\r\n    name: z.string(),\r\n    type: z.string(),\r\n    color: z.enum(TimetableColors),\r\n    options: TimetableOption.rawJson.array(),\r\n    optional: z.boolean().optional()\r\n  });\r\n\r\n  /**\r\n   * Creates a {@link TimetableClass}.\r\n   * @param name The class name, e.g. \"Advanced Tin Opening\".\r\n   * @param title The class type, e.g. \"Workshop\".\r\n   * @param color The color this class will be shown on the timetable.\r\n   * @param options The timetable options. Must have at least 1.\r\n   * @param optional True, if not adding the class to the timetable is an option.\r\n   */\r\n  constructor(name: string, title: string, color: TimetableColor,\r\n    options: TimetableOption[], optional: boolean) {\r\n\r\n    if (options.length < 1) {\r\n      throw TimetableError.classNoOptions();\r\n    }\r\n\r\n    // Each option in this class must be unique.\r\n    if (!areUnique(options, (a, b) => a.equals(b))) {\r\n      throw TimetableError.classDuplicateOptions();\r\n    }\r\n\r\n    this.name = name;\r\n    this.type = title;\r\n    this.color = color;\r\n    this.options = options;\r\n    this.optional = optional;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given object has an identical value to this one.\r\n   * @param other The other object.\r\n   */\r\n  equals(other: TimetableClass) {\r\n    return this.name === other.name\r\n      && this.type === other.type\r\n      && this.color === other.color\r\n      && arraysMatch(this.options, other.options)\r\n      && this.optional === other.optional;\r\n  }\r\n\r\n  /** Convert to JSON object according to {@link TimetableClass.rawJson}. */\r\n  toJSON(): z.infer<typeof TimetableClass.rawJson> {\r\n    return {\r\n      name: this.name,\r\n      type: this.type,\r\n      color: this.color,\r\n      options: this.options.map(o => o.toJSON()),\r\n      optional: this.optional ? true : undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns true if the timetable has classes with weekend options.\r\n   * @param daySplitTime The time after which the end time will be shown on the\r\n   * next day. The time passed here should have the next day flag set.\r\n   */\r\n  hasWeekendOptions(daySplitTime: LocalTime): boolean {\r\n    return this.options.some(c => c.hasWeekendBlocks(daySplitTime));\r\n  }\r\n\r\n  /** Returns the time the earliest block of all the options starts. */\r\n  earliestStartTime(): LocalTime {\r\n    return LocalTime.earliest(...this.options.map(o => o.earliestStartTime()));\r\n  }\r\n\r\n  /** Returns the time the latest block of all the options ends. */\r\n  latestEndTime(): LocalTime {\r\n    return LocalTime.latest(...this.options.map(o => o.latestEndTime()));\r\n  }\r\n\r\n  /** Returns a three-letter abbreviation suiting the class name. */\r\n  getAbbreviatedName(): string {\r\n    const bits = this.name.toUpperCase().split(\" \");\r\n    if (bits.length == 1) {\r\n      if (bits[0].length < 4) {\r\n        return bits[0];\r\n      }\r\n      return bits[0].replace(/[AEIOU]/g, \"\").slice(0, 3);\r\n    }\r\n    return bits.map(x => x[0]).slice(0, 3).join(\"\");\r\n  }\r\n}\r\n", "import { areUnique, arraysMatch } from \"schel-d-utils\";\r\nimport { z } from \"zod\";\r\nimport { LocalTime } from \"../time/local-time\";\r\nimport { TimetableClass } from \"./timetable-class\";\r\nimport { TimetableError } from \"./timetable-error\";\r\n\r\n/** The current version of timetable file this class represents. */\r\nexport const version = \"2\";\r\n\r\n/**\r\n * Represents a timetable. Should be treated as immutable (despite arrays\r\n * technically being mutable).\r\n */\r\nexport class Timetable {\r\n  /** The classes in the timetable. Can be empty. */\r\n  readonly classes: TimetableClass[];\r\n\r\n  /** Zod schema for parsing from JSON. */\r\n  static readonly json = z.object({\r\n    version: z.string().refine(s => s == version),\r\n    classes: TimetableClass.json.array()\r\n  }).transform(x =>\r\n    new Timetable(x.classes)\r\n  );\r\n\r\n  /** Zod schema for parsing from JSON but only using raw types. */\r\n  static readonly rawJson = z.object({\r\n    $schema: z.string(),\r\n    version: z.string(),\r\n    classes: TimetableClass.rawJson.array()\r\n  });\r\n\r\n  /**\r\n   * Creates a {@link Timetable}.\r\n   * @param classes The classes in the timetable. Can be empty.\r\n   */\r\n  constructor(classes: TimetableClass[]) {\r\n    // Each class in this timetable must be unique.\r\n    if (!areUnique(classes, (a, b) => a.equals(b))) {\r\n      throw TimetableError.timetableDuplicateClasses();\r\n    }\r\n\r\n    this.classes = classes;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given object has an identical value to this one.\r\n   * @param other The other object.\r\n   */\r\n  equals(other: Timetable) {\r\n    return arraysMatch(this.classes, other.classes);\r\n  }\r\n\r\n  /** Convert to JSON object according to {@link Timetable.rawJson}. */\r\n  toJSON(): z.infer<typeof Timetable.rawJson> {\r\n    return {\r\n      $schema: \"https://timetabler.danschellekens.com/schema-v2.json\",\r\n      version: \"2\",\r\n      classes: this.classes.map(c => c.toJSON())\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns true if the timetable has classes with weekend options.\r\n   * @param daySplitTime The time after which the end time will be shown on the\r\n   * next day. The time passed here should have the next day flag set.\r\n   */\r\n  hasWeekendOptions(daySplitTime: LocalTime): boolean {\r\n    return this.classes.some(c => c.hasWeekendOptions(daySplitTime));\r\n  }\r\n\r\n  /** Returns the time the earliest block option in the timetable starts. */\r\n  earliestStartTime(): LocalTime {\r\n    return LocalTime.earliest(...this.classes.map(c => c.earliestStartTime()));\r\n  }\r\n\r\n  /** Returns the time the latest block option in the timetable ends. */\r\n  latestEndTime(): LocalTime {\r\n    return LocalTime.latest(...this.classes.map(c => c.latestEndTime()));\r\n  }\r\n}\r\n", "import { areUnique, arraysMatch } from \"schel-d-utils\";\r\nimport { z } from \"zod\";\r\nimport { Timetable, version } from \"./timetable\";\r\nimport { TimetableClass } from \"./timetable-class\";\r\nimport { TimetableError } from \"./timetable-error\";\r\nimport { TimetableOption } from \"./timetable-option\";\r\n\r\n/**\r\n * Stores the timetable as well as the currently selected choices for each class\r\n * in the timetable. Should be treated as immutable (despite arrays technically\r\n * being mutable).\r\n */\r\nexport class TimetableChoices {\r\n  /** The timetable. */\r\n  readonly timetable: Timetable;\r\n\r\n  /**\r\n   * The choices for each class. There must be a choice present representing\r\n   * each class in the timetable.\r\n   */\r\n  readonly choices: TimetableChoice[];\r\n\r\n  /** Zod schema for parsing from JSON. */\r\n  static readonly json = z.object({\r\n    version: z.string().refine(s => s == version),\r\n    classes: TimetableClass.json.array(),\r\n    choices: z.union([z.number().int(), z.null()]).array().optional()\r\n  }).transform(x =>\r\n    TimetableChoices.fromIndices(new Timetable(x.classes), x.choices ?? null)\r\n  );\r\n\r\n  /** Zod schema for parsing from JSON but only using raw types. */\r\n  static readonly rawJson = z.object({\r\n    $schema: z.string(),\r\n    version: z.string(),\r\n    classes: TimetableClass.rawJson.array(),\r\n    choices: z.union([z.number(), z.null()]).array().optional()\r\n  });\r\n\r\n  /**\r\n   * Creates a {@link TimetableChoices}.\r\n   * @param timetable The timetable.\r\n   * @param choices The choices for each class. There must be a choice present\r\n   * representing each class in the timetable.\r\n   */\r\n  constructor(timetable: Timetable, choices: TimetableChoice[]) {\r\n    // Check that the classes present in the choices array match the classes\r\n    // in the timetable. Either array cannot have an element the other does not.\r\n    if (!arraysMatch(choices.map(c => c.timetableClass), timetable.classes)) {\r\n      throw TimetableError.classesChoicesMismatch();\r\n    }\r\n\r\n    // Check no classes are present twice in the choices array.\r\n    if (!areUnique(choices.map(c => c.timetableClass), (a, b) => a.equals(b))) {\r\n      throw TimetableError.duplicatedClassInChoices();\r\n    }\r\n\r\n    this.timetable = timetable;\r\n    this.choices = choices;\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link TimetableChoices} from a timetable and optional array of\r\n   * choice indices.\r\n   * @param timetable The timetable.\r\n   * @param indices The choices indices for each class. There must be a choice\r\n   * present representing each class in the timetable.\r\n   */\r\n  static fromIndices(timetable: Timetable,\r\n    indices: (number | null)[] | null): TimetableChoices {\r\n\r\n    if (indices == null) {\r\n      return new TimetableChoices(\r\n        timetable, timetable.classes.map(c => new TimetableChoice(c, null))\r\n      );\r\n    }\r\n\r\n    if (indices.length != timetable.classes.length) {\r\n      throw TimetableError.badChoiceArrayLength();\r\n    }\r\n\r\n    return new TimetableChoices(\r\n      timetable,\r\n      timetable.classes.map((c, i) => TimetableChoice.fromIndex(c, indices[i]))\r\n    );\r\n  }\r\n\r\n  /** Convert to JSON object according to {@link TimetableChoices.rawJson}. */\r\n  toJSON(): z.infer<typeof TimetableChoices.rawJson> {\r\n    let choices: (number | null)[] | undefined = undefined;\r\n\r\n    // Only create the choices array if some choices have been made.\r\n    if (this.choices.some(c => c.option != null)) {\r\n      // Create the array by finding the index of each option in each class,\r\n      // in the order the classes are in the timetable.\r\n      choices = this.timetable.classes.map(cl => {\r\n        const choice = this.choices.find(ch => ch.timetableClass == cl);\r\n\r\n        // Wont happen. The constructor ensures all classes have choices.\r\n        if (choice == null) { throw new Error(); }\r\n\r\n        const option = choice.option;\r\n        if (option == null) { return null; }\r\n\r\n        const optionIndex = cl.options.findIndex(o => o.equals(option));\r\n        return optionIndex;\r\n      });\r\n    }\r\n\r\n    return {\r\n      ...this.timetable.toJSON(),\r\n      choices: choices\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Creates a new {@link TimetableChoices} object that is identical, except\r\n   * that it has the given option for the given class chosen.\r\n   * @param timetableClass The class to change the choice for.\r\n   * @param option The new choice (or null for no choice).\r\n   */\r\n  withChoice(timetableClass: TimetableClass,\r\n    option: TimetableOption | null): TimetableChoices {\r\n\r\n    const choices = this.choices.map(ch => {\r\n      // If this is the class to modify, change the option.\r\n      if (ch.timetableClass == timetableClass) {\r\n        return new TimetableChoice(timetableClass, option);\r\n      }\r\n\r\n      // Otherwise return the existing choice.\r\n      return ch;\r\n    });\r\n\r\n    return new TimetableChoices(this.timetable, choices);\r\n  }\r\n}\r\n\r\n/** Represents a choice (or no choice) made for a class in the timetable. */\r\nexport class TimetableChoice {\r\n  /** The class the choice is made for. */\r\n  readonly timetableClass: TimetableClass;\r\n\r\n  /**\r\n   * The choice made, or null if no choice is made. Note that null may be a\r\n   * valid choice for an optional class.\r\n   */\r\n  readonly option: TimetableOption | null;\r\n\r\n  /**\r\n   * Creates a {@link TimetableChoice}.\r\n   * @param timetableClass The class the choice is made for.\r\n   * @param option The choice made, or null if no choice is made. Note that null\r\n   * may be a valid choice for an optional class.\r\n   */\r\n  constructor(timetableClass: TimetableClass, option: TimetableOption | null) {\r\n    if (option != null && !timetableClass.options.some(o => o.equals(option))) {\r\n      throw TimetableError.optionMissing();\r\n    }\r\n\r\n    this.timetableClass = timetableClass;\r\n    this.option = option;\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link TimetableChoice} from a class and index.\r\n   * @param timetableClass The class the choice is made for.\r\n   * @param index The index of the option chosen, or null if no choice is made.\r\n   * Note that null may be a valid choice for an optional class.\r\n   */\r\n  static fromIndex(timetableClass: TimetableClass,\r\n    index: number | null): TimetableChoice {\r\n\r\n    if (index == null) {\r\n      return new TimetableChoice(timetableClass, null);\r\n    }\r\n\r\n    if (!Number.isInteger(index) || index < 0 ||\r\n      index >= timetableClass.options.length) {\r\n\r\n      throw TimetableError.badChoiceIndex(index);\r\n    }\r\n\r\n    return new TimetableChoice(timetableClass, timetableClass.options[index]);\r\n  }\r\n}\r\n", "import { download, finder, openFileDialog } from \"schel-d-utils-browser\";\r\nimport { CanvasController } from \"./canvas/canvas-controller\";\r\nimport { ControlsController } from \"./controls-controller\";\r\nimport { Timetable } from \"./timetable/timetable\";\r\nimport { TimetableChoices } from \"./timetable/timetable-choices\";\r\n\r\n// Retrieve the HTML elements from the page.\r\nconst html = {\r\n  controls: finder.any(\"controls\"),\r\n  canvasContainer: finder.div(\"canvas-container\"),\r\n  canvas: finder.canvas(\"canvas\"),\r\n  mobileExpanderButton: finder.button(\"mobile-expander-button\"),\r\n  importButton: finder.button(\"import-button\"),\r\n  exportButton: finder.button(\"export-button\"),\r\n  classes: finder.div(\"classes\")\r\n};\r\n\r\n// Used by other files to refer to the above html object.\r\nexport type Html = typeof html;\r\n\r\nconst controls = new ControlsController(html);\r\n\r\n// Initially, start with an empty timetable.\r\nlet timetable = new TimetableChoices(new Timetable([]), []);\r\n\r\n// Set the canvas size and draw. Also have the canvas resize itself when the\r\n// window size changes.\r\nconst canvas = new CanvasController(html);\r\ncanvas.fitCanvas();\r\nwindow.addEventListener(\"resize\", () => canvas.fitCanvas());\r\n\r\n// Redraw the canvas when the webfonts have loaded.\r\ndocument.fonts.ready.then(() => canvas.markDirty());\r\n\r\n// Toggle the \"collapsed\" class on the controls when the expander button is\r\n// clicked (only appears when the screen is too small to keep it permanently\r\n// open).\r\nhtml.mobileExpanderButton.addEventListener(\"click\", () => {\r\n  html.controls.classList.toggle(\"collapsed\");\r\n});\r\n\r\n// Import a timetable.\r\nhtml.importButton.addEventListener(\"click\", () => {\r\n  openFileDialog(\".json\", (file: string) => {\r\n    const newTimetable = (() => {\r\n      try {\r\n        const json = JSON.parse(file);\r\n        return TimetableChoices.json.parse(json);\r\n      }\r\n      catch (err) {\r\n        alert(\"That .json file was invalid.\");\r\n        console.warn(err);\r\n        return null;\r\n      }\r\n    })();\r\n\r\n    if (newTimetable != null) {\r\n      updateTimetable(newTimetable);\r\n    }\r\n  });\r\n});\r\n\r\n// Export the timetable.\r\nhtml.exportButton.addEventListener(\"click\", () => {\r\n  const text = JSON.stringify(timetable.toJSON());\r\n  download(text, \"timetable.json\");\r\n});\r\n\r\n/**\r\n * Modifies the timetable/choices being displayed with a new one.\r\n * @param newTimetable The new timetable.\r\n */\r\nexport function updateTimetable(newTimetable: TimetableChoices) {\r\n  timetable = newTimetable;\r\n  controls.onTimetableUpdate(timetable);\r\n  canvas.onTimetableUpdate(timetable);\r\n}\r\n\r\n/** Returns the current choices/timetable. */\r\nexport function getCurrentTimetable(): TimetableChoices {\r\n  return timetable;\r\n}\r\n"],
  "mappings": "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",
  "names": ["anchor", "input", "a", "b", "mod", "rem", "canvas", "canvas", "canvas", "canvas", "canvas", "canvas", "timetable", "canvas", "timetable", "dayIndex", "canvas", "timetable", "html", "timetable", "html", "timetable", "util", "map", "errorUtil", "errorMap", "input", "ctx", "result", "objectUtil", "issues", "elements", "processed", "ZodFirstPartyTypeKind", "timetable", "canvas"]
}
